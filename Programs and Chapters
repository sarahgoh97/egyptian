1.1.1 Expressions
- remove division operations (because it violates the only integers thing)
- remove decimals

1.1.2 Naming and the Environment
- pythagorean theorem
    - Pythagoras lived in Egypt
    - pythagorasConstants.js
- can keep example of circles maybe?
            - examples of pyramid with height and base (surface area/volume)
            - examples of const with dividing wages (rice, workers)
                - maybe not this

1.1.3 Evaluating Operator Combinations
- no change to JS parts

1.1.4 Functions
- pythagorean theorem
    - keep the square examples
    - use sum of squares
    - pythagorasFunction.js
            - finding pyramid stuff
                - a bit too complicated, requires division


1.1.5 The Substitution Model for Functional Application
- keep same explanation for square and sum of squares

1.1.6 Conditional Expressions and Predicates
- checking proper fractions
    - sometimes the denominator smaller than numerator because its negative and
    the numerator is positive
    - need to use absolute function to check
        - keep abs function in book
    - add function to test proper fraction
        - checkProperFraction.js
    - take out exercises with division inside (1.1, 1.2)

1.1.7 Example: Square Roots by Newton's Method -> Example: Ceiling and Floor
- example of ceiling and floor as mathematical functions and how it looks like
with computer functions
- doing subtraction recursively
    - function division(big, small) {}
        - initially returns only quotient
        - remainder is missing - need another one for remainder
    - integer division functions here
        - integerDivisionQuotientRecursive.js
        - integerDivisionRemainderRecursive.js
    - ceiling function
        - ceilingRecursive.js
(- alternative is to do the pyramid stuff)
(- using egyptian way of doing multiplication/division)

1.1.8 Functions as Black-Box Abstractions
- multiple ways of doing the smaller functions (same as book)
- lexical scoping with division stuff in ceiling function
    - ceilingBlock.js


1.2.1 Linear Recursion and Iteration
- recursive vs. iterative version of integer division functions
- keeping a counter until it exceeds the bigger number
    - integerDivisionQuotientIterative.js
    - integerDivisionRemainderIterative.js

1.2.2 Tree Recursion
- splitting/pairing method of ef instead of fib?
    - from 1/x = 1/(x+1) + 1/x(x+1)
    - hard because only one number as output for now
- just keep fib becuase nothing else works lol

1.2.3 Orders of Growth
- do the egyptian multiplication/division (need to do intDivQuoEgy and the Rem)
- gcd
    - gcd.js

1.2.4 Functions as Arguments
- intDivision as general function for quotient and remainder
    - integerDivisionGeneral.js

1.2.5 Greatest Common Divisors
1.2.6 Testing for Primality
- nah lets take this out

1.3 Formulating Abstractions with Higher-Order Functions
- talking about pythagoras instead of cube
    - pythagorasFunction.js

1.3.1 Functions as Arguments
- template of name(a, b) { return a > b ? 0 : term(a) + name(next(a), b); }
    - integerDivisionQuotientRecursive.js
    - integerDivisionRemainderRecursive.js
    - sumHarmonicFractions.js (fraction(a,b) = a/b)
        - potentially using sum later for getting EFs, if not just not talk
            - for sum(term, a, next, b)
                - init: a is first index, b is last index, next is a + 1,
                term is the function based on a (eg. array[a])
                - sumHarmonicFractionsAbstract.js
        - then just use the same examples?
            - may be able to say that can use pi for pyramids, so find pi
- good for summations and recursion but not really here huh

1.3.2 Function Definition Expressions
- not separating next as a function but use the "=>"
    - sumHarmonicFractionsExp.js
- const to create local names
    - finding pyramid stuff?
        - pyramid surface area based on the length of square base?
        - or max amt of resources so need to find out the height is
        - if have vertical ht and base, need to use pythagoras and sqrt to
        get slant height to get area of triangle x 4
        - if have resources and base, can see the max slant height then use
        pythagoras to get vertical ht - so maybe just stop at slant height
        - pyramidSlantHeight.js
            - only dealing with integer division
- const to create local names + conditional statements
    - gcdConstCond.js
    - fastDivision?

1.3.3 Functions as General Methods
- greedy method instead of finding roots of eqns by half-interval method
    - explaining greedy method, mention proofs in appendix or smth
    - starts with a fraction and finding denominators
    - can display the results we want but realise that the answer returned is wrong
- show limitation of current one that even though print correctly but output of func is wrong
    - greedyBruteForce.js
    - wrong because cannot tell what are the individual ones
    - greedySummed.js
        - explain how ceiling works with proof and show that its faster

1.3.4 Functions as Returned Values
- talk about how the above 2 methods are valid in finding the biggest uf
    - greedyFuncReturned

2.1 Introduction to Data Abstraction
- arithmetic ops for rational numbers (fractions)
    - use the same
- pairs used to represent fractions can just keep
    - fractions.js
        - includde operations as part of 2.1
- print function using display
- 2.1.4 example of interval arithmetic
    - working greedy method with printing but output still wrong
        - greedyFractions.js
        - returns the original fraction started out with
    - now can return fractions though
        - harmonic sum of fractions (without simplifying)
        - sumHarmonicFractionsPairs.js
            - simplify with gcd to make it nicer
    - introduce another ef algo?
        - splitting method: 2/x = 1/x+1 + 1/x(x+1) - nah

2.2 Hierarchical Data and the Closure Property
- rep seq of answers from greedy algo with list (list ops)
    - adding stuff to list
        - add new function called addToFront for lists
    - splittingRelation.js and pairingRelation.js
    - explain splitting ef method?
        - initialise list of splitting fractions
        - splittingInitialise.js
    - using pairs to show greedy works
        - greedyFractionsList.js
    - start cf by using fraction to make list of cf reps
- mapping over lists
    - continued fractions
        - continuedFractionPrimary.js
            - without mapping
        - continuedFractionPrimaryMap.js
            - edited map with ref to prev and beforePrev
            - original map has only function and the list
    - splitting needs to find 2 of the same kind to merge
- 2.2.2 Hierarchical Structures
  - trees and mapping over them
    - splitting?
        - enumerate through the list
        - filter if same
        - map to the diff ones
        - accumulate by adding and removing, keep same if no repeat
  - nested
        - secondary convergents
            - enumerate through the primary convergents
            - no filter, just in range
            - map to secondary convergents (2d)
            - accumulate into table, put null if nth
- 2.2.4 example: a pic language
  - has images