<SUBSECTION> 
  <NAME>
    Internal
    <SPLITINLINE>
      <SCHEME>Definitions</SCHEME>
      <JAVASCRIPT>Declarations</JAVASCRIPT>
    </SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:env-internal-def"/>
  <INDEX>block structure
  <SUBINDEX>environment@in environment model|(</SUBINDEX></INDEX>
  <INDEX>environment model of evaluation
  <SUBINDEX>internal definitions|(</SUBINDEX></INDEX>
  <INDEX>internal definition
  <SUBINDEX>environment@in environment model|(</SUBINDEX></INDEX>

  <SPLIT>
    <SCHEME>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	Section<SPACE/><REF NAME="sec:env-apply-proc"/> describes the application
	of simple functions according to the environment model, but fails to
	handle proper blocks that contain contains constant, function or
	variable declarations, as the bodies of the functions
	<JAVASCRIPTINLINE>new_withdraw</JAVASCRIPTINLINE> and 
	<JAVASCRIPTINLINE>make_account</JAVASCRIPTINLINE>
	of section<SPACE/><REF NAME="sec:local-state-variables"/>,
	in the function <JAVASCRIPTINLINE>make_rand</JAVASCRIPTINLINE> 
	of section<SPACE/><REF NAME="sec:benefits-of-assignment"/>
	and in both versions of the factorial function 
	of section<SPACE/><REF NAME="sec:costs-of-assignment"/>.
	The declaration of local names within blocks is treated similarly to
	declarations of global names, as for
	example the name <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> in
	section<SPACE/><REF NAME="sec:env-model-rules"/>. We explained
	that the names declared in the program are added to the program
	frame. More precisely, before the program gets evaluated, we identify
	the names that are declared in the program at toplevel (outside of any
	block). These names are all added to the program frame, and then the
	program gets evaluated with respect to the program environment.
	Initially, before the program runs, these names refer to a special value
	<LATEXINLINE>$\textit{unassigned}$</LATEXINLINE>, and any attempt to
	access the value of a name that refers to
	<LATEXINLINE>$\textit{unassigned}$</LATEXINLINE> leads to an error.
	Constant and variable declarations can then be handled like assignments
	in section<SPACE/><REF NAME="sec:env-local-state"/>.
      </TEXT>
      <TEXT>
	In order to evaluate a block in a given environment, we extend the
	environment by a new frame that contains all names declared locally
	(outside of nested blocks) in the block body. These names intially refer
	to the value <LATEXINLINE>$\textit{unassigned}$</LATEXINLINE>, when the
	evaluation of the body commences. The evaluation of the local constant
	and variable declarations then re-assigns the names to the left of the
	<JAVASCRIPTINLINE>=</JAVASCRIPTINLINE> sign, as if the declaration was
	an assignment.<FOOTNOTE>Equipped with a deeper understanding of the
	scope of names, we can now explain why the program in
	footnote<SPACE/><REF NAME="foot:tdz"/> of chapter 1 goes
	wrong.</FOOTNOTE>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  
  <TEXT>
    Section<SPACE/><REF NAME="sec:black-box"/> introduced the idea that
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    can have internal definitions, thus leading to a block structure as in the
    following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to compute square roots:
            <!-- \indcode{sqrt}[environment@in environment model|(] -->
    <SNIPPET EVAL="yes">
      <NAME>another_sqrt</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>sqrt_example7</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (define (good-enough? guess)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    function good_enough(guess) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess){
        return good_enough(guess)
            ? guess
            : sqrt_iter(improve(guess));
    }
    return sqrt_iter(1.0);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Now we can use the environment model to see why these internal
    definitions behave as desired.
    <SPLITINLINE>
      <SCHEME>
    Figure<SPACE/><REF NAME="fig:sqrt-internal_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
    Figure<SPACE/><REF NAME="fig:sqrt-internal"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the point in the evaluation of the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(sqrt 2)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt(2)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    where the internal
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    has been called for the first time with
    <SCHEMEINLINE>guess</SCHEMEINLINE> equal to<SPACE/>1.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-12.svg"></FIGURE>
          <CAPTION>
	    <SCHEMEINLINE>sqrt</SCHEMEINLINE> procedure with internal
	    definitions.
	  </CAPTION>
          <LABEL NAME="fig:sqrt-internal_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-12.svg"></FIGURE>
          <CAPTION>
	    <SCHEMEINLINE>sqrt</SCHEMEINLINE> function with internal
	    definitions.
	  </CAPTION>
          <LABEL NAME="fig:sqrt-internal"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    Observe the structure of the environment.
    <SPLITINLINE><JAVASCRIPT>The name</JAVASCRIPT></SPLITINLINE>
    <SCHEMEINLINE>sqrt</SCHEMEINLINE> is a symbol in
    the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment that is bound to a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object whose associated environment is the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment.  When <SCHEMEINLINE>sqrt</SCHEMEINLINE> was called, a new
    environment E1 was formed, subordinate to the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment, in which the parameter <SCHEMEINLINE>x</SCHEMEINLINE> is bound
    to<SPACE/>2. The body of <SCHEMEINLINE>sqrt</SCHEMEINLINE> was then
    evaluated in<SPACE/>E1. 
    <SPLIT>
      <SCHEME>
	Since the first expression
	in the body of <SCHEMEINLINE>sqrt</SCHEMEINLINE> is
      </SCHEME>
      <JAVASCRIPT>
	That body in this case is a block with local
	function declarations and therefore we extended E1 with a new frame for
	those declarations, resulting in the new environment E2. The body
	of the block was then evaluated in E2. Since the first statement
	in the body is
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET EVAL="no">
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (good-enough? guess)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function good_enough(guess) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
	evaluating this expression defined the procedure
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>
	in the environment<SPACE/>E1.
      </SCHEME>
      <JAVASCRIPT>
	evaluating this declaration created the function
	<JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE>
	in the environment<SPACE/>E2.
      </JAVASCRIPT>
    </SPLIT>
    <SPLIT>
      <SCHEME>
	To<SPACE/>be more precise, the symbol 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE> was added to the first frame
	of E1, bound to a procedure
	object whose associated environment is E1.
      </SCHEME>
      <JAVASCRIPT>
	To<SPACE/>be more precise, the value
	<LATEXINLINE>$\textit{unassigned}$</LATEXINLINE>
	for the symbol <JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE>
	in the first frame of E2 was replaced by a function
	object whose associated environment is E2.
      </JAVASCRIPT>
    </SPLIT>
    Similarly,
    <SCHEMEINLINE>improve</SCHEMEINLINE> and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    were defined as
    <SPLITINLINE>
      <SCHEME>procedures in E1.</SCHEME>
      <JAVASCRIPT>functions in E2.</JAVASCRIPT>
    </SPLITINLINE>
    For conciseness,
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:sqrt-internal_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:sqrt-internal"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows only the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object for 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    After the local
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    were defined, the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(sqrt-iter 1.0)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter(1.0)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    was evaluated, still in environment
    <SPLITINLINE>
      <SCHEME>E1.</SCHEME>
      <JAVASCRIPT>E2.</JAVASCRIPT>
    </SPLITINLINE>
    So the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object bound to 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>
      in E1 was called with 1 as an argument.  This created an environment E2
      in which
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>
      in E2 was called with 1 as an argument.  This created an environment E3
      in which
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>guess</SCHEMEINLINE>, the parameter of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    is bound to 1.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in turn called 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    with the value of <SCHEMEINLINE>guess</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>
	(from E2) as the argument for 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	(from E3) as the argument for 
	<JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    This set up another environment,
    <SPLITINLINE>
      <SCHEME>
	E3, in which
	<SCHEMEINLINE>guess</SCHEMEINLINE> (the parameter of 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>)
      </SCHEME>
      <JAVASCRIPT>
	E4, in which
	<SCHEMEINLINE>guess</SCHEMEINLINE> (the parameter of 
	<JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    is bound to 1. Although 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    both have a parameter named <SCHEMEINLINE>guess</SCHEMEINLINE>, these are two
    distinct local variables located in different frames.
    <SPLIT>
      <SCHEME>
	Also, E2 and E3 both have E1 as their enclosing environment, because the 
	<SCHEMEINLINE>sqrt-iter</SCHEMEINLINE> and 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE> procedures
	both have E1 as their environment part.
      </SCHEME>
      <JAVASCRIPT>
	Also, E3 and E4 both have E2 as their enclosing environment, because the 
	<JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
	and 
	<JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE>
	both have E2 as their environment part.
      </JAVASCRIPT>
    </SPLIT>
    One consequence of this is that the
    symbol <SCHEMEINLINE>x</SCHEMEINLINE> that appears in the body of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will reference the binding of <SCHEMEINLINE>x</SCHEMEINLINE> that appears in
    E1, namely the value of <SCHEMEINLINE>x</SCHEMEINLINE> with which the
    original <SCHEMEINLINE>sqrt</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    was called.
    <!-- \indcode{sqrt}[environment@in environment model|)] -->
  </TEXT>

  <TEXT>
    The environment model thus explains the two key properties that make local
    <SPLITINLINE>
      <SCHEME>procedure definitions</SCHEME>
      <JAVASCRIPT>function declarations</JAVASCRIPT>
    </SPLITINLINE>
    a useful technique for modularizing programs:
    <UL>
      <LI>
	The names of the local
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	do not interfere with
	names external to the enclosing
	<SPLITINLINE>
	  <SCHEME>procedure,</SCHEME>
	  <JAVASCRIPT>function,</JAVASCRIPT>
	</SPLITINLINE>
	because the local
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	names will be bound in the frame that the
	<SPLITINLINE>
	  <SCHEME>procedure creates when it is run,</SCHEME>
	  <JAVASCRIPT>block creates when it is evaluated,</JAVASCRIPT>
	</SPLITINLINE>
	rather than being bound in the
	<SPLITINLINE>
	  <SCHEME>global</SCHEME>
	  <JAVASCRIPT>program</JAVASCRIPT>
	</SPLITINLINE>
	environment.
      </LI>
      <LI>
	The local
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	can access the arguments of the enclosing
	<SPLITINLINE>
	  <SCHEME>procedure,</SCHEME>
	  <JAVASCRIPT>function,</JAVASCRIPT>
	</SPLITINLINE>
	simply by using parameter names as free variables. This is
	because the body of the local
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	is evaluated in an environment that is subordinate to the
	evaluation environment for the enclosing
	<SPLITINLINE>
	  <SCHEME>procedure.</SCHEME>
	  <JAVASCRIPT>function.</JAVASCRIPT>
	</SPLITINLINE>
      </LI>
    </UL>
  </TEXT>

  <EXERCISE>
    <INDEX>environment model of evaluation
    <SUBINDEX>message passing</SUBINDEX></INDEX>
    <INDEX>message passing<SUBINDEX>environment model and</SUBINDEX></INDEX>
    <INDEX>bank account</INDEX>
    In section<SPACE/><REF NAME="sec:env-local-state"/> we saw how the
    environment model described the behavior of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    with local state.  Now we have seen how internal definitions work.
    A typical message-passing
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    contains both of these aspects.  Consider the bank account
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:local-state-variables"/>:
            <!-- \indcode{make-account}[environment@in environment model] -->
    <SNIPPET EVAL="yes">
      <NAME>another_make_account</NAME>
      <EXAMPLE>another_make_account_example</EXAMPLE>
      <EXPECTED>30</EXPECTED>
      <SCHEME>
(define (make-account balance)
  (define (withdraw amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request - - MAKE-ACCOUNT"
                       m))))
  dispatch)
      </SCHEME>
      <JAVASCRIPT>
function make_account(balance) {
    function withdraw(amount) {
        if (balance &gt;= amount) {
            balance = balance - amount;
            return balance;
        } else {
            return "Insufficient funds";
        }
    }
    function deposit(amount) {
        balance = balance + amount;
    }
    function dispatch(m) {
        return m === "withdraw"
               ? withdraw
               : m === "deposit"
                 ? deposit
                 : "Unknown request: make_account";
    }
    return dispatch;
}
      </JAVASCRIPT>
    </SNIPPET>
    Show the environment structure generated by the sequence of
    interactions
    <SNIPPET EVAL="yes">
      <NAME>another_make_account_example</NAME>
      <REQUIRES>another_make_account</REQUIRES>
      <SCHEME>
            (define acc (make-account 50))
            ((acc 'deposit) 40)
            ((acc 'withdraw) 60)
      </SCHEME>
      <JAVASCRIPT>
const acc = make_account(50);
(acc("deposit"))(40);
(acc("withdraw"))(60);
      </JAVASCRIPT>
    </SNIPPET>
    Where is the local state for <SCHEMEINLINE>acc</SCHEMEINLINE> kept?
    Suppose we define another account
    <SNIPPET EVAL="no"> 
      <SCHEME>
            (define acc2 (make-account 100))
      </SCHEME>
      <JAVASCRIPT>
const acc2 = make_account(100);
      </JAVASCRIPT>
    </SNIPPET>
    How are the local states for the two accounts kept distinct?  Which parts
    of the environment structure are shared between
    <SCHEMEINLINE>acc</SCHEMEINLINE> and <SCHEMEINLINE>acc2</SCHEMEINLINE>?
    <LABEL NAME="ex:two-accounts"/>
  </EXERCISE>

  <INDEX>environment model of evaluation|)</INDEX>
  <INDEX>block structure
  <SUBINDEX>environment@in environment model|)</SUBINDEX></INDEX>
  <INDEX>environment model of evaluation
  <SUBINDEX>internal definitions|)</SUBINDEX></INDEX>
  <INDEX>internal definition
  <SUBINDEX>environment@in environment model|)</SUBINDEX></INDEX>
</SUBSECTION>
