<SUBSECTION>
  <NAME>
    The Assembler
  </NAME>

  <LABEL NAME="sec:assembler"/>
  <INDEX>assembler|(</INDEX>

  <TEXT>
    The assembler transforms the sequence of controller expressions for a
    machine into a corresponding list of machine instructions, each with
    its execution
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    Overall, the assembler is much like the evaluators we studied in
    chapter<SPACE/>4<EMDASH/>there is an input language (in this case, the
    register-machine language) and we must perform an appropriate action for
    each type of expression in the language.
  </TEXT>

  <TEXT>
    <INDEX>syntactic analysis, separated from execution
    <SUBINDEX>in register-machine simulator</SUBINDEX></INDEX>
    The technique of producing an execution
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for each instruction is just what we used in
    section<SPACE/><REF NAME="sec:separating-analysis"/> to speed
    up the evaluator by separating analysis from runtime execution.  As we
    saw in chapter<SPACE/>4, much useful analysis of Scheme expressions could
    be performed without knowing the actual values of variables.  Here,
    analogously, much useful analysis of register-machine-language
    expressions can be performed without knowing the actual contents of
    machine registers.  For example, we can replace references to
    registers by pointers to the register objects, and we can
    replace references to labels by pointers to the place in the
    instruction sequence that the label designates.
  </TEXT>

  <TEXT>
    Before it can generate the instruction execution
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
    <JAVASCRIPT>functions,</JAVASCRIPT></SPLITINLINE>
    the assembler must know what all the labels refer to, so it begins by
    scanning the controller text to separate the labels from the
    instructions.  As it scans the text, it constructs both a list of
    instructions and a table that associates each label with a pointer
    into that list.  Then the assembler augments the instruction list by
    inserting the execution
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for each instruction.
  </TEXT>

  <TEXT>
    The <SCHEMEINLINE>assemble</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is the main entry to the assembler. It takes the controller text and the
    machine model as arguments and returns the instruction sequence to be stored
    in the model.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Assemble</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>Assemble</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    calls
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>extract-labels</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>extract_labels</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to build the initial instruction list and label table from the supplied
    controller text.  The second argument
    to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>extract-labels</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>extract_labels</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to be called to process these results: This
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    uses
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>update-insts!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>update_insts</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to generate the instruction execution
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and insert them into the instruction list, and returns the modified list.
    <!--  \indcode*{assemble} -->
    <SNIPPET>
      <NAME>assemble</NAME>
      <REQUIRES>update_insts</REQUIRES>
      <REQUIRES>extract_labels</REQUIRES>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (assemble controller-text machine)
  (extract-labels controller-text
                  (lambda (insts labels)
                    (update-insts! insts labels machine)
                    insts)))
      </SCHEME>
      <JAVASCRIPT>
function assemble(controller_text, machine) {
return extract_labels(controller_text,
                      (insts, labels) => {
                         update_insts(insts, labels, machine);
                         return insts;
                      });
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Extract-labels</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>extract_labels</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes as arguments a list
    <SCHEMEINLINE>text</SCHEMEINLINE> (the sequence of controller
    instruction expressions) and a
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>receive</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>receive</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Receive</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>receive</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will be called with two values: (1) a list
    <SCHEMEINLINE>insts</SCHEMEINLINE> of instruction data structures, each
    containing an instruction from <SCHEMEINLINE>text</SCHEMEINLINE>; and
    (2) a table called <SCHEMEINLINE>labels</SCHEMEINLINE>, which associates each
    label from <SCHEMEINLINE>text</SCHEMEINLINE> with the position in the list
    <SCHEMEINLINE>insts</SCHEMEINLINE> that the label designates.
    <!--  \indcode*{extract-labels} -->
    <!-- FIXME: why is JavaScript version so different
                from the Scheme version?              -->
    <SNIPPET>
      <NAME>extract_labels</NAME>
      <REQUIRES>make_label_entry</REQUIRES>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (extract-labels text receive)
   (if (null? text)
       (receive '() '())
       (extract-labels (cdr text)
        (lambda (insts labels)
          (let ((next-inst (car text)))
            (if (symbol? next-inst)
                (receive insts
                         (cons (make-label-entry next-inst
                                                 insts)
                               labels))
                (receive (cons (make-instruction next-inst)
                               insts)
                         labels)))))))
      </SCHEME>
      <JAVASCRIPT>
function extract_labels(text, receive) {
    function helper(insts, labels) { 
        const next_inst = head(text);
        return is_string(next_inst)
            ? receive(insts, pair(make_label_entry(next_inst, insts), labels))
            : receive(pair(make_instruction(next_inst), insts), labels);
    }
    return text === undefined || is_null(text)
        ? receive(null, null)
        : extract_labels(tail(text), helper);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Extract-labels</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>extract_labels</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    works by sequentially scanning the elements of the
    <SCHEMEINLINE>text</SCHEMEINLINE> and accumulating the
    <SCHEMEINLINE>insts</SCHEMEINLINE> and the
    <SCHEMEINLINE>labels</SCHEMEINLINE>. If an element is a symbol (and thus a
    label) an appropriate entry is added to the
    <SCHEMEINLINE>labels</SCHEMEINLINE> table.  Otherwise the element is
    accumulated onto the <SCHEMEINLINE>insts</SCHEMEINLINE>
    list.<FOOTNOTE>
    <!-- \indcodeplus{receive}{<SPLITINLINE><SCHEME>procedure</SCHEME>
	 <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>} -->
    Using the
    <SCHEMEINLINE>receive</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    here is a way to get
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>extract-labels</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>extract_labels</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to effectively return two
    values<EMDASH/><SCHEMEINLINE>labels</SCHEMEINLINE> and
    <SCHEMEINLINE>insts</SCHEMEINLINE><EMDASH/>without explicitly making a
    compound data structure to hold them.  An alternative implementation, which
    returns an explicit pair of values, is
    <!--  \indcode*{extract-labels} -->
    <SNIPPET EVAL="no">
      <NAME>extract_labels_alternative</NAME>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (extract-labels text)
  (if (null? text)
      (cons '() '())
      (let ((result (extract-labels (cdr text))))
        (let ((insts (car result)) (labels (cdr result)))
          (let ((next-inst (car text)))
            (if (symbol? next-inst)
                (cons insts
                      (cons (make-label-entry next-inst insts) labels))
                (cons (cons (make-instruction next-inst) insts)
                      labels)))))))
      </SCHEME>
  <JAVASCRIPT>
function extract_labels(text) { 
    if (is_null(text)) {
        return pair(null, null);
    } else {
        const result = extract_labels(tail(text));
        const insts = head(result);
        const labels = tail(result);
        const next_inst = head(text);
        return is_string(next_inst)
            ? pair(insts, 
                   pair(make_label_entry(next_inst, insts), labels))
            : pair(pair(make_instruction(next_inst), insts), 
                   labels);
    }
}
  </JAVASCRIPT>
    </SNIPPET>
    which would be called by <SCHEMEINLINE>assemble</SCHEMEINLINE> as follows:
    <!--  \indcode*{assemble} -->
    <SNIPPET EVAL="no">
      <NAME>assemble_alternative</NAME>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (assemble controller-text machine)
  (let ((result (extract-labels controller-text)))
    (let ((insts (car result)) (labels (cdr result)))
      (update-insts! insts labels machine)
      insts)))
      </SCHEME>
  <JAVASCRIPT>
function assemble(controller_text, machine) {
    const result = extract_labels(controller_text);
    const insts = head(result);
    const labels = tail(result);

    update_insts(insts, labels, machine);

    return insts;
}
  </JAVASCRIPT>
    </SNIPPET>

    <INDEX>returning multiple values</INDEX>
    <INDEX><SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    <SUBINDEX>returning multiple values</SUBINDEX></INDEX>
    <INDEX>continuation<SUBINDEX>in register-machine simulator</SUBINDEX></INDEX>
    You can consider our use of <SCHEMEINLINE>receive</SCHEMEINLINE> as
    demonstrating an elegant way to return multiple values, or simply an excuse
    to show off a programming trick.  An argument like
    <SCHEMEINLINE>receive</SCHEMEINLINE> that is the next
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to be invoked is called a <QUOTE>continuation.</QUOTE>  Recall that we
    also used continuations to implement the backtracking control
    structure in the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator in
    section<SPACE/><REF NAME="sec:amb-implementation"/>.</FOOTNOTE>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Update-insts!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
      <JAVASCRIPTINLINE>update_insts</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    modifies the instruction list, which initially contains only the text of the
    instructions, to include the corresponding execution
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <JAVASCRIPT>functions:</JAVASCRIPT>
    </SPLITINLINE>
    <!-- FIXME: JavaScript is unnecessarily different from
	 Scheme here: map should be for-each               -->
    <!-- FIXME: set_instruction_execution_proc should be
         set_instruction_execution_fun                     -->
    <!--  \indcode*{update-insts!} -->
    <SNIPPET>
      <NAME>update_insts</NAME>
      <REQUIRES>get_register</REQUIRES>
      <REQUIRES>make_execution_function</REQUIRES>
      <REQUIRES>make_instruction</REQUIRES>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (update-insts! insts labels machine)
  (let ((pc (get-register machine 'pc))
        (flag (get-register machine 'flag))
        (stack (machine 'stack))
        (ops (machine 'operations)))
    (for-each
     (lambda (inst)
       (set-instruction-execution-proc! 
        inst
        (make-execution-procedure
         (instruction-text inst) labels machine
         pc flag stack ops)))
     insts)))
      </SCHEME>
      <JAVASCRIPT>
function update_insts(insts, labels, machine) {
    const pc = get_register(machine, "pc");
    const flag = get_register(machine, "flag");
    const stack = machine("stack");
    const ops = machine("operations");
    const set_iep = set_instruction_execution_proc;
    const make_ep = make_execution_function;
    return map(i => set_iep(i,
                            make_ep(instruction_text(i),
                                    labels,
                                    machine,
                                    pc,
                                    flag,
                                    stack,
                                    ops)),
               insts);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The machine instruction data structure simply pairs the
    instruction text with the corresponding execution
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    The execution
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is not yet available when
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>extract-labels</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>extract_labels</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    constructs the instruction, and is inserted later by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>update-insts!</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>update_insts</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
      <!--  \indcode*{make-instruction} -->
      <!--  \indcode*{instruction-text} -->
      <!--  \indcode*{instruction-execution-proc} -->
      <!--  \indcode*{set-instruction-execution-proc!} -->
    <SNIPPET>
      <NAME>make_instruction</NAME>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (make-instruction text)
  (cons text '()))

(define (instruction-text inst)
  (car inst))

(define (instruction-execution-proc inst)
  (cdr inst))

(define (set-instruction-execution-proc! inst proc)
  (set-cdr! inst proc))
      </SCHEME>
      <JAVASCRIPT>
function make_instruction(text) {
    return pair(text, null);
}
function instruction_text(inst) {
    return head(inst);
}
function instruction_execution_proc(inst) {
    return tail(inst);
}
function set_instruction_execution_proc(inst, proc) {
    set_tail(inst, proc); 
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The instruction text is not used by our simulator, but it is handy to keep
    around for debugging (see
    exercise<SPACE/><REF NAME="ex:reg-machine-instruction-trace"/>).
  </TEXT>

  <TEXT>
    Elements of the label table are pairs:
    <!--  \indcode*{make-label-entry} -->
    <SNIPPET>
      <NAME>make_label_entry</NAME>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (make-label-entry label-name insts)
  (cons label-name insts))
      </SCHEME>
      <JAVASCRIPT>
function make_label_entry(label_name, insts) {
    return pair(label_name, insts);
}
      </JAVASCRIPT>
    </SNIPPET>
    Entries will be looked up in the table with
    <!--  \indcode*{lookup-label} -->
    <SNIPPET>
      <NAME>lookup_label</NAME>
      <EXAMPLE>gcd_machine_complete_example</EXAMPLE>
      <SCHEME>
(define (lookup-label labels label-name)
  (let ((val (assoc label-name labels)))
    (if val
        (cdr val)
        (error "Undefined label - - ASSEMBLE" label-name))))
      </SCHEME>
      <JAVASCRIPT>
function lookup_label(labels, label_name) {
    const val = assoc(label_name, labels);
    return val === undefined
        ? error(label_name, "Undefined label in assemble:")
        : tail(val);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    The following register-machine code is ambiguous, because the label
    <SCHEMEINLINE>here</SCHEMEINLINE> is defined more than once:
    <SNIPPET EVAL="no">
      <SCHEME>
start
  (goto (label here))
here
  (assign a (const 3))
  (goto (label there))
here
  (assign a (const 4))
  (goto (label there))
there
      </SCHEME>
      <JAVASCRIPT>
"start",
  go_to(label(here)),
"here",
  assign("a", constant(3)),
  go_to(label(there)),
"here",
  assign("a", constant(4)),
  go_to(label(there)),
"there",
      </JAVASCRIPT>
    </SNIPPET>
    With the simulator as written, what will the contents of register
    <SCHEMEINLINE>a</SCHEMEINLINE> be when control reaches
    <SCHEMEINLINE>there</SCHEMEINLINE>?  Modify the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>extract-labels</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>extract_labels</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    so that the assembler will signal an error if the same label
    name is used to indicate two different locations.
  </EXERCISE>
  <INDEX>assembler|)</INDEX>
</SUBSECTION>


