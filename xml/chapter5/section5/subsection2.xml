<SUBSECTION>
  <NAME>
    Compiling Expressions
  </NAME>

  <TEXT>
    In this section and the next we implement the code generators to which the
    <SCHEMEINLINE>compile</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    dispatches.
  </TEXT>

  <SUBHEADING>
    <NAME>Compiling linkage code</NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>compiler for Scheme<SUBINDEX>linkage code</SUBINDEX></INDEX>
    In general, the output of each code generator will end with
    instructions<EMDASH/>generated by the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-linkage</SCHEMEINLINE><EMDASH/>that</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_linkage</JAVASCRIPTINLINE><EMDASH/>that
      </JAVASCRIPT>
    </SPLITINLINE>
    implement the required linkage.  If the linkage is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"return"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    then
    we must generate the instruction
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>go_to(reg("continue"))</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    This needs the <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> register and does not
    modify any registers. If the linkage is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"next"</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    then we needn<APOS/>t include any additional instructions.  Otherwise, the
    linkage is a label, and we generate a
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>goto</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>go_to</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to that label, an instruction that does not need or modify
    any registers.<SPLITINLINE><FOOTNOTE>This
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    uses a feature of
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    called
    <INDEX>list(s)<SUBINDEX>backquote with</SUBINDEX></INDEX>
    <INDEX>backquote</INDEX><INDEX>quasiquote</INDEX>
    <!-- \indcodeplus{`}{(backquote)}-->
    <!-- \indcodeplus{,}{(comma, used with backquote)}-->
    <INDEX>comma, used with backquote</INDEX>
    <EM>backquote</EM> (or <EM>quasiquote</EM>) that is handy for constructing
    lists. Preceding a list with a backquote symbol is much like quoting it,
    except that anything in the list that is flagged with a comma is
    evaluated.</FOOTNOTE></SPLITINLINE>
  </TEXT>

  <TEXT>
    For example, if the value of <SCHEMEINLINE>linkage</SCHEMEINLINE> is the
    <SPLITINLINE>
      <SCHEME>symbol</SCHEME>
      <JAVASCRIPT>string</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>branch25</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"branch25"</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    then the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>`((goto (label ,linkage)))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>go_to(label(linkage))</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    evaluates to the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>((goto (label branch25)))</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>go_to(label("branch25"))</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Similarly, if the value of <SCHEMEINLINE>x</SCHEMEINLINE> is the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(a b c)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list("a", "b", "c")</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    then
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>`(1 2 ,x)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(1, 2, head(x))</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    evaluates to the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(1 2 a)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(1, 2, "a")</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <!--  \indcode*{compile-linkage} -->
    <SNIPPET EVAL="no">
      <NAME>compile_linkage</NAME>
      <SCHEME>
      (define (compile-linkage linkage)
      (cond ((eq? linkage 'return)
            (make-instruction-sequence '(continue) '()
            '((goto (reg continue)))))
            ((eq? linkage 'next)
            (empty-instruction-sequence))
            (else
            (make-instruction-sequence '() '()
            ` ((goto (label ,linkage)))))))
      </SCHEME>
      <JAVASCRIPT>
function compile_linkage(linkage) {
    return linkage === "return"
        ? make_instruction_sequence(
              list("continue"), 
              null,
              list(go_to(reg("continue"))))
        : linkage === "next"
          ? empty_instruction_sequence()
          : make_instruction_sequence(
                null, 
                null, 
                list(go_to(label(linkage))));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The linkage code is appended to an instruction sequence by
    <SCHEMEINLINE>preserving</SCHEMEINLINE> the
    <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> register, since a
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"return"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    linkage will
    require the <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> register:
    If the given instruction sequence modifies
    <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> and the linkage code needs it,
    <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> will be saved and restored.
    <!--  \indcode*{end-with-linkage} -->
    <SNIPPET EVAL="no">
      <NAME>end_with_linkage</NAME>
      <SCHEME>
      (define (end-with-linkage linkage instruction-sequence)
      (preserving '(continue)
      instruction-sequence
      (compile-linkage linkage)))
      </SCHEME>
      <JAVASCRIPT>
function end_with_linkage(linkage, instruction_sequence) {
return preserving(list("continue"),
                  instruction_sequence,
                  compile_linkage(linkage));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SUBHEADING>
    <NAME>Compiling simple expressions</NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>compiler for Scheme
    <SUBINDEX>self-evaluating expressions</SUBINDEX></INDEX>
    <INDEX>compiler for Scheme<SUBINDEX>quotations</SUBINDEX></INDEX>
    <INDEX>compiler for Scheme<SUBINDEX>variables</SUBINDEX></INDEX>
    The code generators for self-evaluating expressions,
    quotations, and variables construct instruction
    sequences that assign the required value to the target register
    and then proceed as specified by the linkage descriptor.
    <!--  \indcode*{compile-self-evaluating} -->
    <!--  \indcode*{compile-quoted} -->
    <!--  \indcode*{compile-variable} -->
    <SNIPPET EVAL="no">
      <NAME>compile_self_evaluating</NAME>
      <SCHEME>
      (define (compile-self-evaluating exp target linkage)
      (end-with-linkage linkage
      (make-instruction-sequence '() (list target)
      `((assign ,target (const ,exp))))))

      (define (compile-quoted exp target linkage)
      (end-with-linkage linkage
      (make-instruction-sequence '() (list target)
      `((assign ,target (const ,(text-of-quotation exp)))))))

      (define (compile-variable exp target linkage)
      (end-with-linkage linkage
      (make-instruction-sequence '(env) (list target)
      `((assign ,target
            (op lookup-variable-value)
            (const ,exp)
            (reg env))))))
    </SCHEME>
    <JAVASCRIPT>
function compile_self_evaluating(exp, target, linkage) {
    return end_with_linkage(
               linkage,
               make_instruction_sequence(
                   null,
                   list(target),
                   list(assign(target, constant(exp)))));
}

function compile_name(exp, target, linkage) {
    return end_with_linkage(
               linkage,
               make_instruction_sequence(
                   list("env"),
                   list(target),
                   list(assign(target, 
                               list(op("lookup_symbol_value"),
                                    constant(exp), reg("env"))))));
    }
    </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    All these assignment instructions modify the target register,
    and the one that looks up a variable needs the
    <SCHEMEINLINE>env</SCHEMEINLINE> register.
  </TEXT>

  <TEXT>
    <INDEX>compiler for Scheme<SUBINDEX>assignments</SUBINDEX></INDEX>
    <INDEX>compiler for Scheme<SUBINDEX>definitions</SUBINDEX></INDEX>
    Assignments and definitions are handled much as they are in the
    interpreter.  We recursively generate code that computes the value to
    be assigned to the variable, and append to it a two-instruction
    sequence that actually sets or defines the variable and assigns the
    value of the whole expression
    <SPLITINLINE>
      <SCHEME>
	(the symbol <SCHEMEINLINE>ok</SCHEMEINLINE>)
      </SCHEME>
      <JAVASCRIPT>
	(the string <JAVASCRIPTINLINE>"ok"</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    to the target register.  The recursive compilation has target
    <SCHEMEINLINE>val</SCHEMEINLINE> and linkage
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"next"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    so that the code will put its result into
    <SCHEMEINLINE>val</SCHEMEINLINE> and continue with the code that is appended
    after it.  The appending is done preserving <SCHEMEINLINE>env</SCHEMEINLINE>,
    since the environment is needed for setting or defining the variable and the
    code for the variable value could be the compilation of a complex expression
    that might modify the registers in arbitrary ways.
    <!--  \indcode*{compile-assignment} -->
    <!--  \indcode*{compile-definition} -->
    <SNIPPET EVAL="no">
      <NAME>compile_assignment</NAME>
      <SCHEME>
      (define (compile-assignment exp target linkage)
      (let ((var (assignment-variable exp))
            (get-value-code
            (compile (assignment-value exp) 'val 'next)))
      (end-with-linkage linkage
      (preserving '(env)
      get-value-code
      (make-instruction-sequence '(env val) (list target)
      `((perform (op set-variable-value!)
            (const ,var)
            (reg val)
            (reg env))
            (assign ,target (const ok))))))))

      (define (compile-definition exp target linkage)
      (let ((var (definition-variable exp))
            (get-value-code
            (compile (definition-value exp) 'val 'next)))
      (end-with-linkage linkage
      (preserving '(env)
      get-value-code
      (make-instruction-sequence '(env val) (list target)
      `((perform (op define-variable!)
            (const ,var)
            (reg val)
            (reg env))
            (assign ,target (const ok))))))))
      </SCHEME>
      <JAVASCRIPT>
function compile_assignment(stmt, target, linkage) {
    const symbol = assignment_symbol(stmt);
    const value_code =
              compile(assignment_value(stmt), "val", "next");
    return compile_assignment_preserving(symbol,
               value_code, target, linkage, reg("val"));
}

function compile_assignment_preserving(
             symbol, value_code, target, linkage, return_val) {
    return end_with_linkage(
               linkage,
               preserving(
                   list("env"),
                   value_code,
                   make_instruction_sequence(
                       list("env", "val"),
                       list(target),
                       list(perform(
                                op("assign_symbol_value"),
                                constant(symbol),
                                reg("val"),
                                reg("env")),
                            assign(target, return_val)))));
}

function compile_constant_declaration(stmt, target, linkage) {
    const symbol = constant_declaration_symbol(stmt);
    const value_code =
              compile(constant_declaration_value(stmt), "val", "next");
    return compile_assignment_preserving(symbol,
               value_code, target, linkage, constant(undefined));
}

function compile_variable_declaration(stmt, target, linkage) {
    const variable = variable_declaration_symbol(stmt);
    const value_code =
              compile(variable_declaration_value(stmt), "val", "next");
    return compile_assignment_preserving(variable,
               value_code, target, linkage, constant(undefined));
}

      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The appended two-instruction sequence requires
    <SCHEMEINLINE>env</SCHEMEINLINE> and <SCHEMEINLINE>val</SCHEMEINLINE>
    and modifies the target.  Note that although we preserve
    <SCHEMEINLINE>env</SCHEMEINLINE> for this sequence, we do not preserve
    <SCHEMEINLINE>val</SCHEMEINLINE>, because the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>get-value-code</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>get_value_code</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is designed to explicitly place its result in
    <SCHEMEINLINE>val</SCHEMEINLINE> for use by this sequence.
    (In fact, if we did preserve <SCHEMEINLINE>val</SCHEMEINLINE>, we would
    have a bug, because this would cause the previous contents of
    <SCHEMEINLINE>val</SCHEMEINLINE> to be restored right after the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>get-value-code</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>get_value_code</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is run.)
  </TEXT>

  <SUBHEADING>
    <NAME>Compiling conditional expressions</NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>compiler for Scheme<SUBINDEX>conditionals</SUBINDEX></INDEX>
    The code for an
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>if</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	conditional
      </JAVASCRIPT>
    </SPLITINLINE>
    expression
    compiled with a given target and linkage has the form
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      ^compilation of predicate, target^ val^, linkage^ next
      (test (op false?) (reg val))
      (branch (label false-branch))
      true-branch
      ^compilation of consequent with given target and given linkage or^ after-if
      false-branch
      ^compilation of alternative with given target and linkage^
      after-if
      </SCHEME>
      <JAVASCRIPT>
  $\langle compilation$ $of$ $predicate,$ $target$ val, $linkage$ next$\rangle$
  test(list(op("is_false"), reg("val"))),
  branch(label("false_branch")),
"true_branch",
  $\langle compilation$ $of$ $consequent$ $with$ $given$ $target$ $and$ $given$ $linkage$ $or$ after_if$\rangle$
"false_branch",
  $\langle compilation$ $of$ $alternative$ $with$ $given$ $target$ $and$ $linkage\rangle$
"after_if"
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To generate this code, we compile the predicate, consequent,
    and alternative, and combine the resulting code with instructions
    to test the predicate result and with newly generated labels to mark the
    true and false branches and the end of the 
    conditional.<FOOTNOTE>We can<APOS/>t just use the labels
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>true-branch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>true_branch</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>false-branch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>false_branch</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>after-if</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>after_if</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    as shown above, because there might be more than one
    <SCHEMEINLINE>if</SCHEMEINLINE> in the program.
    <INDEX>compiler for Scheme<SUBINDEX>label generation</SUBINDEX></INDEX>
    The compiler uses the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-label</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_label</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to generate labels.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-label</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>make_label</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes a symbol as argument and returns a new symbol that begins with the
    given symbol.  For example, successive calls to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(make-label 'a)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_label("a")</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    would return <SCHEMEINLINE>a1</SCHEMEINLINE>,
    <SCHEMEINLINE>a2</SCHEMEINLINE>, and so on.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-label</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>make_label</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    can be implemented similarly to the generation of unique variable names in
    the query language, as follows:
    <INDEX>character strings<SUBINDEX>primitive procedures for</SUBINDEX></INDEX>
    <!--  \indcode*{make-label} -->
    <SNIPPET EVAL="no">
      <NAME>make_label</NAME>
      <SCHEME>
        (define label-counter 0)

        (define (new-label-number)
        (set! label-counter (+ 1 label-counter))
        label-counter)

        (define (make-label name)
        (string-&gt;symbol
        (string-append (symbol-&gt;string name)
              (number-&gt;string (new-label-number)))))
      </SCHEME>
      <JAVASCRIPT>
let label_counter = 0;

function new_label_number() {
    label_counter = label_counter + 1;
    return label_counter;
}

function make_label(name) {
    return name + stringify(new_label_number());
}
      </JAVASCRIPT>
    </SNIPPET></FOOTNOTE>
    In this arrangement of code, we must branch around the true branch
    if the test is false.  The only slight complication is in how the
    linkage for the true branch should be handled.  If the linkage for the
    conditional is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"return"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    or a label, then the
    true and false branches will both use this same linkage.  If the linkage is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"next"</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    the true branch ends with a jump around
    the code for the false branch to the label at the end of the conditional.
    <!--  \indcode*{compile-if} -->
    <SNIPPET EVAL="no">
      <NAME>compile_conditional_expression</NAME>
      <SCHEME>
      (define (compile-if exp target linkage)
      (let ((t-branch (make-label 'true-branch))
            (f-branch (make-label 'false-branch))                    
            (after-if (make-label 'after-if)))
      (let ((consequent-linkage
            (if (eq? linkage 'next) after-if linkage)))
      (let ((p-code (compile (if-predicate exp) 'val 'next))
            (c-code
            (compile
            (if-consequent exp) target consequent-linkage))
            (a-code
            (compile (if-alternative exp) target linkage)))
            (preserving '(env continue)
            p-code
            (append-instruction-sequences
            (make-instruction-sequence '(val) '()
            `((test (op false?) (reg val))
            (branch (label ,f-branch))))
            (parallel-instruction-sequences
            (append-instruction-sequences t-branch c-code)
            (append-instruction-sequences f-branch a-code))
            after-if))))))
      </SCHEME>
      <JAVASCRIPT>
function compile_conditional_expression(stmt, target, linkage) {
    let t_branch = make_label("true_branch");
    let f_branch = make_label("false_branch");
    let after_cond = make_label("after_cond");
    let consequent_linkage =
            linkage === "next" ? after_cond : linkage;
    let p_code = compile(cond_expr_pred(stmt), "val", "next");
    let c_code = compile(cond_expr_cons(stmt),
                         target, consequent_linkage);
    let a_code = compile(cond_expr_alt(stmt),
                         target, linkage);

    return preserving(
             list("env", "continue"),
               p_code,
               append_instruction_sequences(
                 make_instruction_sequence(
                   list("val"),
                     list(),
                     list(test(op("is_false"), reg("val")),
                          branch(label(f_branch)))),
               parallel_instruction_sequences(
                 append_instruction_sequences(t_branch, c_code),
                 append_instruction_sequences(f_branch, a_code)),
               after_cond));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Env</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The register
	<SCHEMEINLINE>env</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is preserved around the predicate code
    because it could be needed by the true and false branches, and
    <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> is preserved because it could
    be needed by the linkage code in those branches.  The code for the true and
    false branches (which are not executed sequentially) is appended using a
    special combiner
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>parallel-instruction-sequences</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>parallel_instruction_sequences</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    described in
    section<SPACE/><REF NAME="sec:combining-instruction-sequences"/>.
  </TEXT>

  <SPLIT>
    <SCHEME>
      <TEXT>
	<SPLIT><SCHEME></SCHEME><JAVASCRIPT>FIXME:</JAVASCRIPT></SPLIT>
	Note that <SCHEMEINLINE>cond</SCHEMEINLINE> is a derived expression,
	so all that the compiler needs to do handle it is to apply the
	<SCHEMEINLINE>cond-&gt;if</SCHEMEINLINE> transformer
	(from section<SPACE/><REF NAME="sec:representing-expressions"/>) and
	compile the resulting <SCHEMEINLINE>if</SCHEMEINLINE> expression.
      </TEXT>
    </SCHEME>
  </SPLIT>
  
  <SUBHEADING>
    <NAME>Compiling sequences</NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>compiler for Scheme
    <SUBINDEX>sequences of expressions</SUBINDEX></INDEX>
    The compilation of sequences (from
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    bodies or explicit
    <SCHEMEINLINE>begin</SCHEMEINLINE> expressions) parallels their evaluation.
    Each expression of the sequence is compiled<EMDASH/>the last expression with
    the linkage specified for the sequence, and the other expressions with
    linkage
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"next"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    (to execute the rest of the
    sequence). The instruction sequences for the individual expressions are
    appended to form a single instruction sequence, such that
    <SCHEMEINLINE>env</SCHEMEINLINE> (needed for the rest of the sequence) and
    <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> (possibly needed for the linkage at
    the end of the sequence) are preserved.
    <!--  \indcode*{compile-sequence} -->
    <SNIPPET EVAL="no">
      <NAME>compile_sequence</NAME>
      <SCHEME>
      (define (compile-sequence seq target linkage)
      (if (last-exp? seq)
      (compile (first-exp seq) target linkage)
      (preserving '(env continue)
      (compile (first-exp seq) target 'next)
      (compile-sequence (rest-exps seq) target linkage))))
      </SCHEME>
      <JAVASCRIPT>
function compile_sequence(seq, target, linkage) {
    return is_last_statement(seq)
        ? compile(first_statement(seq), target, linkage)
        : preserving(
            list("env", "continue"),
            compile(first_statement(seq), target, "next"),
            compile_sequence(rest_statements(seq), target, linkage));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SUBHEADING>
    <NAME>Compiling
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lambda</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	lambda
      </JAVASCRIPT>
    </SPLITINLINE>
    expressions</NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>compiler for Scheme
    <SUBINDEX>lambda@<SCHEMEINLINE>lambda</SCHEMEINLINE> expressions</SUBINDEX>
    </INDEX>
    Lambda expressions construct
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    The object code for a lambda expression must have the form
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      ^construct procedure object and assign it to target register^
      ^linkage^
      </SCHEME>
      <JAVASCRIPT>
$\langle \textit{construct function object and assign it to target register} \rangle$
$\langle \textit{linkage} \rangle$
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    When we compile the lambda expression, we also generate the code for the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body. Although the body won<APOS/>t be executed at the time of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    construction, it is convenient to insert it into the object code right after
    the code for the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>lambda expression.</JAVASCRIPT>
    </SPLITINLINE>
    If the linkage for the lambda expression is a label or
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"return"</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    this is fine.  But if the linkage is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"next"</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    we will need to skip around the code for
    the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body by using a linkage that jumps to a label that is inserted after the
    body.  The object code thus has the form
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      ^construct procedure object and assign it to target register^
      ^code for given linkage <EM>or</EM>^ (goto (label after-lambda))
      ^compilation of procedure body^
      after-lambda
      </SCHEME>
      <JAVASCRIPT>
$\langle \textit{construct function object and assign it to target register}\rangle$
$\langle \textit{code for given linkage}\rangle\ \textit{or}$ go_to(label("after_lambda"))
$\langle \textit{compilation of function body} \rangle$
"after_lambda",
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Compile-lambda</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>Compile_lambda</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    generates the code for constructing the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object followed by the code for the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body. The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object will be constructed at run time by combining the current environment
    (the environment at the point of definition) with the entry point to the
    compiled
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body (a newly generated label).<FOOTNOTE>We need machine operations to
    implement a data structure for representing compiled
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    analogous to the structure for compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    described in section<SPACE/><REF NAME="sec:eval-data-structures"/>:
    <!--  \indcode*{make-compiled-procedure} -->
    <!--  \indcode*{compiled-procedure?} -->
    <!--  \indcode*{compiled-procedure-entry} -->
    <!--  \indcode*{compiled-procedure-env} -->
    <SNIPPET EVAL="no">
      <NAME>make_compiled_function</NAME>
      <SCHEME>
        (define (make-compiled-procedure entry env)
        (list 'compiled-procedure entry env))

        (define (compiled-procedure? proc)
        (tagged-list? proc 'compiled-procedure))

        (define (compiled-procedure-entry c-proc) (cadr c-proc))

        (define (compiled-procedure-env c-proc) (caddr c-proc))
      </SCHEME>
      <JAVASCRIPT>
function make_compiled_function(entry, env) {
    return list("compiled_function", entry, env);
}

function is_compiled_function(proc) {
    return is_tagged_list(proc, "compiled_function");
} 

function compiled_function_entry(c_proc) {
    return head(tail(c_proc));
}

function compiled_function_env(c_proc) {
    return head(tail(tail(c_proc)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <LABEL NAME="foot:compiler-ops"/></FOOTNOTE>
    <!--  \indcode*{compile-lambda} -->
    <SNIPPET EVAL="no">
      <NAME>compile_lambda</NAME>
      <SCHEME>
      (define (compile-lambda exp target linkage)
      (let ((proc-entry (make-label 'entry))
            (after-lambda (make-label 'after-lambda)))
      (let ((lambda-linkage
            (if (eq? linkage 'next) after-lambda linkage)))
      (append-instruction-sequences
      (tack-on-instruction-sequence
            (end-with-linkage lambda-linkage
            (make-instruction-sequence '(env) (list target)
            `((assign ,target
            (op make-compiled-procedure)
            (label ,proc-entry)
            (reg env)))))
            (compile-lambda-body exp proc-entry))
      after-lambda))))
      </SCHEME>
      <JAVASCRIPT>
function compile_lambda_expression(exp, target, linkage) {
    let fun_entry = make_label("entry");
    let after_lambda = make_label("after_lambda"); 
    let lambda_linkage =
            linkage === "next" ? after_lambda : linkage;
    return append_instruction_sequences(
        tack_on_instruction_sequence(
          end_with_linkage(
            lambda_linkage,
            make_instruction_sequence(
              list("env"), 
              list(target),
              list(assign(target, 
                          list(op("make_compiled_function"),
                               label(fun_entry), reg("env")))))),
          compile_lambda_body(exp, fun_entry)),
         after_lambda);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Compile-lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>compile_lambda_expression</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    uses the special combiner
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>tack-on-instruction\?sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>tack_on_instruction_sequence</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    (section<SPACE/><REF NAME="sec:combining-instruction-sequences"/>) rather
    than
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>append-instruction-sequences</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>append_instruction_sequences</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to append the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body to the <SCHEMEINLINE>lambda</SCHEMEINLINE> expression code, because the
    body is not part of the sequence of instructions that will be executed when
    the combined sequence is entered; rather, it is in the sequence only because
    that was a convenient place to put it.
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Compile-lambda-body</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>compile_lambda_body</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    constructs the code for the body of the
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    This code begins with a label for the entry point.  Next come instructions
    that will cause the run-time evaluation environment to switch to the correct
    environment for evaluating the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body<EMDASH/>namely, the definition environment of the
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    extended to include the bindings of the formal parameters to the arguments
    with which the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is called.  After this comes the code for the sequence of expressions that
    makes up the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body. The sequence is compiled with linkage
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"return"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and target
    <SCHEMEINLINE>val</SCHEMEINLINE>
    so that it will end by returning from the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    result in <SCHEMEINLINE>val</SCHEMEINLINE>.
    <SNIPPET EVAL="no">
      <NAME>compile_lambda_body</NAME>
      <SCHEME>
      (define (compile-lambda-body exp proc-entry)
      (let ((formals (lambda-parameters exp)))
      (append-instruction-sequences
      (make-instruction-sequence '(env proc argl) '(env)
      `(,proc-entry
            (assign env 
                    (op compiled-procedure-env) 
                    (reg proc))
            (assign env
                    (op extend-environment)
                    (const ,formals)
                    (reg argl)
                    (reg env))))
      (compile-sequence (lambda-body exp) 'val 'return))))
      </SCHEME>
      <JAVASCRIPT>
function compile_lambda_body(exp, proc_entry) {
    let formals  = lambda_parameters(exp);
    return append_instruction_sequences(
        make_instruction_sequence(
            list("env", "proc", "argl"),
            list("env"),
            list(proc_entry,
                 assign("env", list(op("compiled_function_env"), 
                                    reg("fun"))),
                 assign("env", list(op("extend_environment"), 
                                    constant(formals),
                                    reg("argl"), 
                                    reg("env")))),
        compile_sequence(lambda_body(exp), "val", "return")));
} 
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

</SUBSECTION>
