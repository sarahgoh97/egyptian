<SUBSECTION>
  <NAME>
    Sequence Evaluation and Tail Recursion
  </NAME>

  <LABEL NAME="sec:sequence-evaluation"/>
  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>sequences of expressions|(</SUBINDEX></INDEX>

  <TEXT>
    The portion of the explicit-control evaluator at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is analogous to the metacircular evaluator<APOS/>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_sequence</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    It handles sequences of expressions in
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    bodies or in 
    <SPLITINLINE>
      <SCHEME>explicit <SCHEMEINLINE>begin</SCHEMEINLINE> expressions.</SCHEME>
      <JAVASCRIPT>sequences of statements.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>explicit<SCHEMEINLINE>begin</SCHEMEINLINE> expressions</SCHEME>
      <JAVASCRIPT>Sequences of statements</JAVASCRIPT>
    </SPLITINLINE>
    are evaluated by placing the sequence of expressions to be evaluated in
    <SCHEMEINLINE>unev</SCHEMEINLINE>, saving
    <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> on the
    stack, and jumping to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <SCHEME>
<!--  \indcode*{ev-begin} -->
ev-begin
(assign unev (op begin-actions) (reg exp))
(save continue)
(goto (label ev-sequence))
      </SCHEME>
      <JAVASCRIPT>
"ev_seq",
    save("continue"),
    assign("unev", list(op("sequence_statements"), reg("stmt"))),
    go_to(label("ev_sequence")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The implicit sequences in
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    bodies are handled by jumping to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    from
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compound-apply</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compound_apply</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    at which point <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> is already on the stack,
    having been saved at
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>ev-application</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_application</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    The entries at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence-continue</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_sequence_continue</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    form a loop that successively evaluates each expression in a sequence.  The
    list of unevaluated expressions is kept in <SCHEMEINLINE>unev</SCHEMEINLINE>.
    Before evaluating each expression, we check to see if there are additional
    expressions to be evaluated in the sequence.  If so, we save the rest of the
    unevaluated expressions (held in <SCHEMEINLINE>unev</SCHEMEINLINE>) and the
    environment in which these must be evaluated (held in
    <SCHEMEINLINE>env</SCHEMEINLINE>) and call
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to evaluate the expression.  The two saved registers are restored upon
    the return from this evaluation, at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence-continue</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_sequence_continue</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    The final expression in the sequence is handled differently, at the
    entry point
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence-last-exp</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>ev_sequence_last_exp</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Since there are no more expressions to be evaluated after this one, we need
    not save <SCHEMEINLINE>unev</SCHEMEINLINE> or
    <SCHEMEINLINE>env</SCHEMEINLINE> before going to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>.
    </JAVASCRIPT></SPLITINLINE>
    The value of the whole sequence is the value of the last expression, so
    after the evaluation of the last expression there is nothing left to do
    except continue at the entry point currently held on the stack (which was
    saved by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-application</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_application</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    or
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-begin</SCHEMEINLINE>.)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_seq</JAVASCRIPTINLINE>.)</JAVASCRIPT>
    </SPLITINLINE>
    Rather than setting up <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> to arrange for
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to return here and then restoring <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> from
    the stack and continuing at that entry point, we restore
    <LATEXINLINE>$\texttt{continue}$</LATEXINLINE> from the stack before going to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    so that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will continue at that entry point after evaluating the expression.
    <SNIPPET EVAL="no">
      <SCHEME>
<!--  \indcode*{ev-sequence}[with tail recursion] -->
ev-sequence
(assign exp (op first-exp) (reg unev))
(test (op last-exp?) (reg unev))
(branch (label ev-sequence-last-exp))
(save unev)
(save env)
(assign continue (label ev-sequence-continue))
(goto (label eval-dispatch))
ev-sequence-continue
(restore env)
(restore unev)
(assign unev (op rest-exps) (reg unev))
(goto (label ev-sequence))
ev-sequence-last-exp
(restore continue)
(goto (label eval-dispatch))
      </SCHEME>
      <JAVASCRIPT>
"ev_sequence",
      assign("exp", list(op("first_statement"), reg("unev"))),
      test(list(op("is_last_statement"), reg("unev"), constant(true))),
      branch(label("ev_sequence_last_exp")),
      save("unev"),
      save("env"),
      assign("continue", label("ev_sequence_continue")),
      go_to(label("eval_dispatch")),
      
"ev_sequence_continue",
      restore("env"),
      restore("unev"),
      assign("unev", list(op("rest_statements"), reg("unev"))),
      go_to(label("ev_sequence")),
      
"ev_sequence_last_exp",
      restore("continue"),
      go_to(label("eval_dispatch")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SUBHEADING> 
    <NAME>Tail recursion</NAME>
  </SUBHEADING>

  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>tail recursion|(</SUBINDEX></INDEX>
  <INDEX>tail recursion
  <SUBINDEX>explicit-control evaluator and|(</SUBINDEX></INDEX>
  <TEXT>
    In chapter<SPACE/>1 we said that the process described by a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    such as
    <SNIPPET EVAL="no">
      <SCHEME>
(define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x)
      x)))
      </SCHEME>
      <JAVASCRIPT>
function sqrt_iter(guess, x) {
    return is_good_enough(guess, x)
        ? guess
        : sqrt_iter(improve(guess, x), x);
}
      </JAVASCRIPT>
    </SNIPPET>
    is an iterative process.  Even though the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is syntactically recursive (defined in terms of itself), it is not logically
    necessary for an evaluator to save information in passing from one call to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to the next.<FOOTNOTE>We saw in
    section<SPACE/><REF NAME="sec:designing-register-machines"/> how to
    implement such a process with a register machine that had no stack; the
    state of the process was stored in a fixed set of registers.</FOOTNOTE> An
    evaluator that can execute a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    without requiring increasing storage as the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    continues to call itself is called a 
    <INDEX>tail-recursive evaluator</INDEX>
    <EM>tail-recursive</EM> evaluator.  
    <INDEX>metacircular evaluator for Scheme
    <SUBINDEX>tail recursiveness unspecified in</SUBINDEX></INDEX>
    <INDEX>tail recursion<SUBINDEX>metacircular evaluator and</SUBINDEX></INDEX>
    The metacircular implementation of the evaluator in chapter<SPACE/>4 does
    not specify whether the evaluator is tail-recursive, because that evaluator
    inherits its mechanism for saving state from the underlying Scheme.  With
    the explicit-control evaluator, however, we can trace through the evaluation
    process to see when
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    calls cause a net accumulation of information on the stack.
  </TEXT>

  <TEXT>
    Our evaluator is tail-recursive, because in order to evaluate the final
    expression of a sequence we transfer directly to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    without saving any information on the stack.  Hence, evaluating the final
    expression in a sequence<EMDASH/>even if it is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    call (as in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    where the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>if</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>conditional</JAVASCRIPT>
    </SPLITINLINE>
    expression, which is the last expression in the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    body, reduces to a call to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>)<EMDASH/>will </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>)<EMDASH/>will
      </JAVASCRIPT>
    </SPLITINLINE>
    not cause any information to be accumulated on the stack.<FOOTNOTE>This
    implementation of tail recursion in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is one variety of a well-known optimization technique used
    by many compilers.  In compiling a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that ends with a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    call, one can replace the call by a jump to the called
    <SPLITINLINE>
      <SCHEME>procedure<APOS/>s</SCHEME>
      <JAVASCRIPT>function<APOS/>s</JAVASCRIPT>
    </SPLITINLINE>
    entry point. Building this strategy into the interpreter, as we have done in
    this section, provides the optimization uniformly throughout the
    language.</FOOTNOTE>
  </TEXT>

  <TEXT>
    If we did not think to take advantage of the fact that it was unnecessary to
    save information in this case, we might have implemented
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_sequence</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    by treating all the expressions in a sequence in the same way<EMDASH/>saving
    the registers, evaluating the expression, returning to restore the registers,
    and repeating this until all the expressions have been
    evaluated:<FOOTNOTE>We can define
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>no-more-exps?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>has_no_more_exps</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    as follows:
    <SNIPPET EVAL="no">
      <SCHEME>
        <!--  \indcode*{no-more-exps?} -->
        (define (no-more-exps? seq) (null? seq))
      </SCHEME>
      <JAVASCRIPT>
function has_no_more_exps(seq) {
    return is_null(seq);
}
      </JAVASCRIPT>
    </SNIPPET></FOOTNOTE>
    <SNIPPET EVAL="no">
      <SCHEME>
      <!--  \indcode*{ev-sequence}[without tail recursion] -->
      ev-sequence
      (test (op no-more-exps?) (reg unev))
      (branch (label ev-sequence-end))
      (assign exp (op first-exp) (reg unev))
      (save unev)
      (save env)
      (assign continue (label ev-sequence-continue))
      (goto (label eval-dispatch))
      ev-sequence-continue
      (restore env)
      (restore unev)
      (assign unev (op rest-exps) (reg unev))
      (goto (label ev-sequence))
      ev-sequence-end
      (restore continue)
      (goto (reg continue))
      </SCHEME>
      <JAVASCRIPT>
<!--  \indcode*{ev-sequence}[without tail recursion] -->
"ev_sequence",
     test(list(op("has_no_more_exps"), reg("unev"))),
     branch(label("ev_sequence_end")),
     assign(exp(op("first_exp"), reg("unev")),
     save("unev"),
     save("env"),
     assign(continue(label("ev_sequence_continue"))),
     go_to(label("eval_dispatch")),
"ev_sequence_continue",
     restore("env"),
     restore("unev"),
     assign("unev", op("rest_exps"), reg("unev")),
     go_to(label("ev_sequence")),
"ev_sequence_end",
     restore("continue"),
     go_to(reg("continue")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    This may seem like a minor change to our previous code for evaluation of a
    sequence:  The only difference is that we go through the save-restore cycle
    for the last expression in a sequence as well as for the others.  The
    interpreter will still give the same value for any expression.  But this
    change is fatal to the tail-recursive implementation, because we must now
    return after evaluating the final expression in a sequence in order to undo
    the (useless) register saves.  These extra saves will accumulate during a
    nest of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    calls.  Consequently, processes such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will require space proportional to the number of iterations rather than
    requiring constant space.  This difference can be significant. For example,
    <INDEX>iterative process<SUBINDEX>implemented by
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> call</SUBINDEX></INDEX>
    with tail recursion, an infinite loop can be expressed using only the
    <SPLITINLINE>
      <SCHEME>procedure-call</SCHEME>
      <JAVASCRIPT>function-call</JAVASCRIPT>
    </SPLITINLINE>
    mechanism:
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (count n)
      (newline)
      (display n)
      (count (+ n 1)))
      </SCHEME>
      <JAVASCRIPT>
function count(n) {
    display(n, "\n");
    count(n + 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    Without tail recursion, such a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    would eventually run out of stack space, and expressing a true iteration
    would require some control mechanism other than
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    call.
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>tail recursion|)</SUBINDEX></INDEX>
    <INDEX>tail recursion
    <SUBINDEX>explicit-control evaluator and|)</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>sequences of expressions|)</SUBINDEX></INDEX>
  </TEXT>

</SUBSECTION>
