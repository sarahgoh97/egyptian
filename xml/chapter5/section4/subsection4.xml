<SUBSECTION>
  <NAME>
    Running the Evaluator
  </NAME>

  <LABEL NAME="sec:running-evaluator"/>
  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>running|(</SUBINDEX></INDEX>
  <TEXT>
    <INDEX>models of evaluation</INDEX>
    <INDEX>evaluation<SUBINDEX>models of</SUBINDEX></INDEX>
    With the implementation of the explicit-control evaluator we come to
    the end of a development, begun in chapter<SPACE/>1, in which we have
    explored successively more precise models of the evaluation process.
    We started with the relatively informal substitution model, then
    extended this in chapter<SPACE/>3 to the environment model, which enabled us
    to deal with state and change.  In the metacircular evaluator of
    chapter<SPACE/>4, we used Scheme itself as a language for making more
    explicit the environment structure constructed during evaluation of an
    expression.  Now, with register machines, we have taken a close look
    at the evaluator<APOS/>s mechanisms for storage management,
    argument passing, and control.  At
    each new level of description, we have had to raise issues and resolve
    ambiguities that were not apparent at the previous, less precise
    treatment of evaluation.  To understand the behavior of the
    explicit-control evaluator, we can simulate it and monitor its
    performance.
  </TEXT>

  <TEXT>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>driver loop</SUBINDEX></INDEX>
    <INDEX>driver loop
    <SUBINDEX>explicit@in explicit-control evaluator</SUBINDEX></INDEX>
    We will install a driver loop in our evaluator machine.  This plays
    the role of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>driver-loop</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>driver_loop</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:running-eval"/>.  The evaluator will
    repeatedly print a prompt, read an expression, evaluate the expression by
    going to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    and print the result.  The following instructions form the beginning of the
    explicit-control evaluator<APOS/>s controller sequence:<FOOTNOTE>We assume
    here that <SCHEMEINLINE>read</SCHEMEINLINE> and the various printing
    operations are available as primitive machine operations, which is useful
    for our simulation, but completely unrealistic in practice.  These are
    actually extremely complex operations.  In practice, they would be
    implemented using low-level input-output operations such as transferring
    single characters to and from a device.
    <P/>
    To support the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>get-global-environment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>get_global_environment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation we define
    <!--  \indcode*{the-global-environment} -->
    <!--  \indcode*{get-global-environment} -->
    <SNIPPET EVAL="no">
      <NAME>the_global</NAME>
      <SCHEME>
    (define the-global-environment (setup-environment))

    (define (get-global-environment)
    the-global-environment)
      </SCHEME>
      <JAVASCRIPT>
function get_global_environment() {
    return the_global_environment;
}
      </JAVASCRIPT>
    </SNIPPET></FOOTNOTE>
    <INDEX>prompts<SUBINDEX>explicit-control evaluator</SUBINDEX></INDEX>
    <!--  \indcode*{read-eval-print-loop} -->
    <!--  \indcode*{print-result} -->
    <SNIPPET EVAL="no">
      <SCHEME>
      read-eval-print-loop
      (perform (op initialize-stack))
      (perform
      (op prompt-for-input) (const ";;; EC-Eval input:"))
      (assign exp (op read))
      (assign env (op get-global-environment))
      (assign continue (label print-result))
      (goto (label eval-dispatch))
      print-result
      (perform
      (op announce-output) (const ";;; EC-Eval value:"))
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
"read_eval_print_loop",
      assign("exp", list(op("prompt_for_input"), 
                         constant("/// EC_Eval input:"))),
      assign("env", list(op("get_global_environment"))),
      assign("continue", label("print_result")),
      go_to(label("eval_dispatch")),

"print_result",
      perform(list(op("user_print"), 
                   constant("EC_Eval value:"), 
                   reg("val"))),
      go_to(label("read_eval_print_loop")), 
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>error handling
    <SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>error handling</SUBINDEX></INDEX>
    When we encounter an error in a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    (such as the <QUOTE>unknown
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    type error</QUOTE> indicated at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>),</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_dispatch</JAVASCRIPTINLINE>),
      </JAVASCRIPT>
    </SPLITINLINE>
    we print an error message and return to the driver loop.<FOOTNOTE>There are
    other errors that we would like the interpreter to handle, but these are not
    so simple.  See exercise<SPACE/><REF NAME="ex:interp-errors"/>.</FOOTNOTE>
    <!--  \indcode*{unknown-expression-type} -->
    <!--  \indcode*{unknown-procedure-type} -->
    <!--  \indcode*{signal-error} -->
    <SNIPPET EVAL="no">
      <SCHEME>
      unknown-expression-type
      (assign val (const unknown-expression-type-error))
      (goto (label signal-error))

      unknown-procedure-type
      (restore continue)    <EM>; clean up stack (from <SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>)</EM>
      (assign val (const unknown-procedure-type-error))
      (goto (label signal-error))

      signal-error
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
"unknown_expression_type",
      assign("val", constant("unknown_expression_type_error")),
      assign("val", reg("exp")),
      go_to(label("signal_error")),
      
"unknown_procedure_type",
      restore("continue"), 
      assign("val", constant("unknown_procedure_type_error")),
      go_to(label("signal_error")),
      
"signal_error",
      perform(list(op("user_print"), constant("EC_eval error:"), reg("val"))),
      go_to(label("evaluator_done")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    For the purposes of the simulation, we initialize the stack each time
    through the driver loop, since it might not be empty after an error
    (such as an undefined variable) interrupts an evaluation.<FOOTNOTE>We
    could perform the stack initialization only after errors, but doing it in
    the driver loop will be convenient for monitoring the evaluator<APOS/>s
    performance, as described below.</FOOTNOTE>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>controller|)</SUBINDEX></INDEX>
  </TEXT>

  <TEXT>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>machine model</SUBINDEX></INDEX>
    If we combine all the code fragments presented in sections
    <REF NAME="sec:eceval-core"/><ENDASH/><REF NAME="sec:running-evaluator"/>,
    we can create an evaluator machine model that we can run using the
    register-machine simulator of section<SPACE/><REF NAME="sec:simulator"/>.

    <SNIPPET EVAL="no">
      <SCHEME>
      (define eceval
      (make-machine
      '(exp env val proc argl continue unev)
      eceval-operations
      '(
      read-eval-print-loop
      ^entire machine controller as given above^
      )))
      </SCHEME>
      <JAVASCRIPT>
function eceval() {
    return make_machine(list("stmt", "env", "val", "fun", "argl", "continue", "unev")
                        eceval_operations,
                        list(read_eval_print_loop,
                             ... /* entire machine controller as given above */ 
                             ));
}                       
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    We must define Scheme
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to simulate the operations used as primitives by the evaluator.  These are
    the same
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    we used for the metacircular evaluator in
    section<SPACE/><REF NAME="sec:mc-eval"/>, together with the few additional
    ones defined in footnotes throughout section<SPACE/><REF NAME="sec:eceval"/>.
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(define eceval-operations
  (list (list 'self-evaluating? self-evaluating)
        <EM><LATEXINLINE>$\langle$</LATEXINLINE>complete list of operations for eceval machine<LATEXINLINE>$\rangle$</LATEXINLINE></EM>))
      </SCHEME>
      <JAVASCRIPT>
const eceval_operations = 
    list(list("is_self_evaluating", is_self_evaluating),
         $\textit{complete list of operations for eceval machine}$
        );
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Finally, we can initialize the global environment and run the evaluator:
    <SNIPPET>
      <NAME>ec_eval_all</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <REQUIRES>user_print</REQUIRES>
      <REQUIRES>the_global</REQUIRES>
      <REQUIRES>make_machine</REQUIRES>
      <REQUIRES>start</REQUIRES>
      <SCHEME>
      (define the-global-environment (setup-environment))

      (start eceval)
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (append x y)
(if (null? x)
y
(cons (car x)
    (append (cdr x) y))))
;;; EC-Eval value:
ok

;;; EC-Eval input:
(append '(a b c) '(d e f))
;;; EC-Eval value:
(a b c d e f)
      </SCHEMEOUTPUT>
      <JAVASCRIPT_RUN>
const no_value_yet = () => null;

function make_compound_function(parameters, body, env) {
  return list("compound_function", parameters, make_block(body), env);
}

// The function local_names collects all names declared in the
// body statements. For a name to be included in the list of
// local_names, it needs to be declared outside of any other
// block or function.

function insert_all(xs, ys) {
  return is_null(xs)
    ? ys
    : is_null(member(head(xs), ys))
    ? pair(head(xs), insert_all(tail(xs), ys))
    : error(head(xs), "multiple declarations of: ");
}

function local_names(stmt) {
  if (is_sequence(stmt)) {
    const stmts = sequence_statements(stmt);
    return is_empty_sequence(stmts)
      ? null
      : insert_all(
          local_names(first_statement(stmts)),
          local_names(make_sequence(rest_statements(stmts)))
        );
  } else {
    return is_constant_declaration(stmt)
      ? list(constant_declaration_symbol(stmt))
      : is_variable_declaration(stmt)
      ? list(variable_declaration_symbol(stmt))
      : null;
  }
}

function is_empty_environment(env) {
  return is_null(env);
}

/* THE GLOBAL ENVIRONMENT */

// the minus operation is overloaded to
// support both binary minus and unary minus

function minus(x, y) {
  if (is_number(x) && is_number(y)) {
    return x - y;
  } else {
    return -x;
  }
}

// the global environment has bindings for all
// primitive functions, including the operators


// Global registers
let the_heads = [];
let the_tails = [];
let free = 0;

const POINTER_TAG = 800;
const NUMBER_TAG = 801;
const STRING_TAG = 802;
const NULL_TAG = -1;

/// Pairs implemented using vectors of heads and tails as in 5.3

function head_(n) {
  return vector_ref(the_heads, n);
}

function tail_(n) {
  return vector_ref(the_tails, n);
}

function vector_ref(xs, index) {
  return xs[index];
}

function vector_set(xs, index, value) {
  xs[index] = value;
  return undefined;
}

function pair_(a, b) {
  // perform(list(op("vector_set"), reg("the_heads"), reg("free"), a));
  // perform(list(op("vector_set"), reg("the_tails"), reg("free"), b));
  // assign("free", list(op("+"), reg("free"), constant(1)));
  // display(is_number(a), "is_number");

  const ret = free;
  vector_set(the_heads, free, a);
  vector_set(the_tails, free, b);

  free = free + 1;
  return ret;
}

function binary_function(f) {
  // f is binary
  return (arg_list) =>
    is_list(arg_list) && length(arg_list) === 2
      ? apply_in_underlying_javascript(f, arg_list)
      : error(
          arg_list,
          "Incorrect number of arguments passed to binary function "
        );
}

function eceval() {
  return make_machine(
    list(
      "exp",
      "env",
      "val",
      "continue",
      "proc",
      "argl",
      "unev",
      "fun",
      "retval"
    ),
    list(
      // basic functions
      list(
        "rem",
        binary_function((a, b) => a % b)
      ),
      list(
        "=",
        binary_function((a, b) => a === b)
      ),
      list(
        "+",
        binary_function((a, b) => a + b)
      ),
      list(
        "===",
        binary_function((a, b) => a === b)
      ),
      // args
      list("args"                , args),
      list("function_expression" , function_expression),
      list("has_no_operands"     , no_args),
      list("first_arg"           , first_arg),
      list(
        "is_last_operand",
        (a) => is_null(tail(a))
      ),
      list("rest_args", rest_args),

      //arg
      list(
        "empty_arglist",
        (_) => list()
      ),
      list(
        "adjoin_arg",
        (val, argl) => append(argl, list(val))
      ),

      // exp (sequence)
      list("first_statement"     , first_statement),
      list("rest_statements"     , rest_statements),
      list("is_last_statement"   , is_last_statement),
      list("sequence_statements" , sequence_statements),

      // eval functions from meta-circular evaluator
      list("is_self_evaluating"  , is_self_evaluating),
      list("is_name"             , is_name),
      list("symbol_of_name"      , symbol_of_name),
      list(
        "all_names_of_names",
        (names) => map(symbol_of_name, names)
      ),
      list("is_assignment"           , is_assignment),
      list("assignment_symbol"       , assignment_symbol),
      list("assignment_value"        , assignment_value),
      list("assign_symbol_value"     , assign_symbol_value),
      list("is_constant_declaration" , is_constant_declaration),
      list(
        "constant_declaration_symbol",
        constant_declaration_symbol
      ),
      list(
        "constant_declaration_value",
        constant_declaration_value
      ),
      list("is_variable_declaration", is_variable_declaration),
      list(
        "variable_declaration_symbol",
        variable_declaration_symbol
      ),
      list(
        "variable_declaration_value",
        variable_declaration_value
      ),
      list("declare_value"        , assign_symbol_value),
      list("is_lambda_expression" , is_lambda_expression),
      list(
        "lambda_parameters",
        lambda_parameters
      ),
      list("lambda_body"         , lambda_body),
      list("is_return_statement" , is_return_statement),
      list("should_return"       , v => v !== undefined &amp;&amp; v !== no_value_yet),
      list("returned_value" , v => v !== no_value_yet),
      list("return_expression"   , return_expression),
      list(
        "is_conditional_expression",
        is_conditional_expression
      ),
      list("conditional_pred" , cond_expr_pred),
      list("conditional_cons" , cond_expr_cons),
      list("conditional_alt"  , cond_expr_alt),

      list("is_sequence"      , is_sequence),
      list("make_sequence"    , make_sequence),
      list("is_block"         , is_block),
      list("block_body"       , block_body),
      list("local_names"      , local_names),
      list(
        "get_temp_block_values",
        (locals) => map((x) => no_value_yet, locals)
      ),
      list("is_application"           , is_application),
      list("is_primitive_function"    , is_primitive_function),
      list("apply_primitive_function" , apply_primitive_function),
      list("is_compound_function"     , is_compound_function),
      list("function_parameters"      , function_parameters),
      list("function_environment"     , function_environment),
      list("function_body"            , function_body),
      list("insert_all"               , insert_all),
      list("extend_environment"       , extend_environment),
      list("make_compound_function"   , make_compound_function),

      list(
        "lookup_symbol_value",
        (stmt, env) => lookup_symbol_value(symbol_of_name(stmt), env)
      ),
      list("get_global_environment", get_global_environment),

      // generic helpers
      list("is_true", is_true),
      list("is_null", is_null),
      list(
        "is_pair",
        (a) => is_pair(a)
      ),
      list(
        "is_number",
        (a) => is_number(a)
      ),
      list(
        "append",
        (xs, ys) => append(xs, ys)
      ),

      list("vector_ref", vector_ref),
      list("vector_set", vector_set),
      list("pair", pair_),

      list("prompt_for_input", (s) => prompt_for_input(s)),
      list("user_print", user_print),
      list("display", display)
    ),
    list(
      assign("retval", constant(no_value_yet)),
      assign("continue", label("evaluator_done")),
      assign("env", list(op("get_global_environment"))),
      "ev_begin",
      
      go_to(label("read_eval_print_loop")),
      
      "eval_dispatch",
        test(list(op("should_return"), reg("retval"), constant(true))),
        branch(label("install_return_value")),

      test(list(op("is_self_evaluating"), reg("exp"), constant(true))),
      branch(label("ev_self_eval")),

      test(list(op("is_name"), reg("exp"), constant(true))),
      branch(label("ev_name")),

      // Treat let/const the same
      test(list(op("is_variable_declaration"), reg("exp"), constant(true))),
      branch(label("ev_variable_declaration")),
      test(list(op("is_constant_declaration"), reg("exp"), constant(true))),
      branch(label("ev_constant_declaration")),
      test(list(op("is_assignment"), reg("exp"), constant(true))),
      branch(label("ev_assignment")),

      test(list(op("is_return_statement"), reg("exp"), constant(true))),
      branch(label("ev_return")),

      test(list(op("is_conditional_expression"), reg("exp"), constant(true))),
      branch(label("ev_if")),
      test(list(op("is_lambda_expression"), reg("exp"), constant(true))),
      branch(label("ev_lambda")),
      test(list(op("is_sequence"), reg("exp"), constant(true))),
      branch(label("ev_seq")),
      test(list(op("is_block"), reg("exp"), constant(true))),
      branch(label("ev_block")),
      test(list(op("is_application"), reg("exp"), constant(true))),
      branch(label("ev_application")),
      go_to(label("unknown_expression_type")),

        "ev_return",
          assign("exp", list(op("return_expression"), reg("exp"))),
          save("continue"),
          assign("continue", label("ev_return_2")),
          go_to(label("eval_dispatch")),
  
        "ev_return_2",
          assign("retval", reg("val")),
          restore("continue"),
          go_to(reg("continue")),
      
      "ev_self_eval",
      assign("val", reg("exp")),
      go_to(reg("continue")),
      
      "ev_name",
      assign("val", list(op("lookup_symbol_value"), reg("exp"), reg("env"))),
      go_to(reg("continue")),
      
      "ev_lambda",
      assign("unev", list(op("lambda_parameters"), reg("exp"))),
      assign("exp", list(op("lambda_body"), reg("exp"))),
      assign(
      "val",
      list(op("make_compound_function"), reg("unev"), reg("exp"), reg("env"))
      ),
      go_to(reg("continue")),
      
      "ev_application",
      save("continue"),
      save("env"),
      assign("unev", list(op("args"), reg("exp"))),
      save("unev"),
      assign("exp", list(op("function_expression"), reg("exp"))),
      assign("continue", label("ev_appl_did_operator")),
      go_to(label("eval_dispatch")),
      
      "ev_appl_did_operator",
      restore("unev"), // the args
      restore("env"),
      assign("argl", list(op("empty_arglist"))),
      assign("fun", reg("val")), // the function_expression
      test(list(op("has_no_operands"), reg("unev"), constant(true))),
      branch(label("apply_dispatch")),
      save("fun"),
      
      "ev_appl_operand_loop",
      save("argl"),
      assign("exp", list(op("first_arg"), reg("unev"))),
      test(list(op("is_last_operand"), reg("unev"), constant(true))),
      branch(label("ev_appl_last_arg")),
      save("env"),
      save("unev"),
      assign("continue", label("ev_appl_accumulate_arg")),
      go_to(label("eval_dispatch")),
      
      "ev_appl_accumulate_arg",
      restore("unev"),
      restore("env"),
      restore("argl"),
      assign("argl", list(op("adjoin_arg"), reg("val"), reg("argl"))),
      assign("unev", list(op("rest_args"), reg("unev"))),
      go_to(label("ev_appl_operand_loop")),
      
      "ev_appl_last_arg",
      assign("continue", label("ev_appl_accum_last_arg")),
      go_to(label("eval_dispatch")),
      
      "ev_appl_accum_last_arg",
      restore("argl"),
      assign("argl", list(op("adjoin_arg"), reg("val"), reg("argl"))),
      restore("fun"),
      go_to(label("apply_dispatch")),
      
      // function application needs to distinguish between
      // primitive functions (which are evaluated using the
      // underlying JavaScript), and compound functions.
      // An application of the latter needs to evaluate the
      // body of the function value with respect to an
      // environment that results from extending the function
      // object`s environment by a binding of the function
      // parameters to the arguments and of local names to
      // the special value no_value_yet
      
      // function apply(fun, args) {
      //   if (is_primitive_function(fun)) {
      //     return apply_primitive_function(fun, args);
      //   } else if (is_compound_function(fun)) {
      //     const body = function_body(fun);
      //     const locals = local_names(body);
      //     const names = insert_all(function_parameters(fun), locals);
      //     const temp_values = map((x) => no_value_yet, locals);
      //     const values = append(args, temp_values);
      //     const result = evaluate(
      //       body,
      //       extend_environment(names, values, function_environment(fun))
      //     );
      //     if (is_return_value(result)) {
      //       return return_value_content(result);
      //     } else {
      //       return undefined;
      //     }
      //   } else {
      //     error(fun, "Unknown function type in apply");
      //   }
      // }
      "apply_dispatch",
      test(list(op("is_primitive_function"), reg("fun"), constant(true))),
      branch(label("primitive_apply")),
      test(list(op("is_compound_function"), reg("fun"), constant(true))),
      branch(label("compound_apply")),
      go_to(label("unknown_procedure_type")),

      "primitive_apply",
      assign("val", list(op("apply_primitive_function"), 
                         reg("fun"), 
                         reg("argl"))),
      // go_to(label("return_from_apply")),
      restore("continue"),
      go_to(reg("continue")),
      
        "compound_apply",
          assign("unev", list(op("function_parameters"), reg("fun"))), // params
          assign("env", list(op("function_environment"), reg("fun"))),
          assign("env", list(op("extend_environment"), 
                             reg("unev"), 
                             reg("argl"), 
                             reg("env"))),
          assign("unev", list(op("function_body"), reg("fun"))),
          assign("continue", label("after_apply")),
          save("continue"),
          assign("retval", constant(no_value_yet)),
          go_to(label("ev_sequence")),
    
        "install_return_value",
          assign("val", reg("retval")),
          assign("retval", constant(undefined)),
          restore("continue"),
          go_to(reg("continue")),
            
        "after_apply",
          test(list(op("returned_value"), reg("retval"), constant(true))),
          branch(label("defined_return_value")),
  
          assign("val", constant(undefined)),
  
        "defined_return_value",
          assign("retval", constant(undefined)),
          restore("continue"),
          go_to(reg("continue")),
            
      // to evaluate a sequence, we need to evaluate
      // its statements one after the other, and return
      // the value of the last statement.
      // An exception to this rule is when a return
      // statement is encountered. In that case, the
      // remaining statements are ignored and the
      // return value is the value of the sequence.
      
      // function eval_sequence(stmts, env) {
      //   if (is_empty_sequence(stmts)) {
      //     return undefined;
      //   } else if (is_last_statement(stmts)) {
      //     return evaluate(first_statement(stmts), env);
      //   } else {
      //     const first_stmt_value = evaluate(first_statement(stmts), env);
      //     if (is_return_value(first_stmt_value)) {
      //       return first_stmt_value;
      //     } else {
      //       return eval_sequence(rest_statements(stmts), env);
      //     }
      //   }
      // }
      "ev_seq",
      save("continue"),
      assign("unev", list(op("sequence_statements"), reg("exp"))),
      
      "ev_sequence",
      assign("exp", list(op("first_statement"), reg("unev"))),
      test(list(op("is_last_statement"), reg("unev"), constant(true))),
      branch(label("ev_sequence_last_exp")),
      save("unev"),
      save("env"),
      assign("continue", label("ev_sequence_continue")),
      go_to(label("eval_dispatch")),
      
      "ev_sequence_continue",
      restore("env"),
      restore("unev"),
      assign("unev", list(op("rest_statements"), reg("unev"))),
      go_to(label("ev_sequence")),
      
      "ev_sequence_last_exp",
      restore("continue"),
      go_to(label("eval_dispatch")),
      
      // evaluation of blocks evaluates the body of the block
      // with respect to the current environment extended by
      // a binding of all local names to the special value
      // no_value_yet
      
      // function eval_block(stmt, env) {
      //   const body = block_body(stmt);
      //   const locals = local_names(body);
      //   const temp_values = map((x) => no_value_yet, locals);
      //   return evaluate(body, extend_environment(locals, temp_values, env));
      // }
      "ev_block",
      save("continue"),
      assign("exp", list(op("block_body"), reg("exp"))),
      assign("val", list(op("local_names"), reg("exp"))),

      save("exp"), // Temporarily store to exp
      assign("exp", list(op("get_temp_block_values"), reg("val"))),
      assign("env", list(op("extend_environment"), 
                         reg("val"), 
                         reg("exp"), 
                         reg("env"))),
      restore("exp"),
      go_to(label("eval_dispatch")),
      
      // the meta-circular evaluation of conditional expressions
      // evaluates the predicate and then the appropriate
      // branch, depending on whether the predicate evaluates to
      // true or not
      
      // function eval_conditional_expression(stmt, env) {
      //   return is_true(evaluate(cond_expr_pred(stmt), env))
      //     ? evaluate(cond_expr_cons(stmt), env)
      //     : evaluate(cond_expr_alt(stmt), env);
      // }
      "ev_if",
      save("exp"), // save expression for later
      save("env"),
      save("continue"),
      assign("continue", label("ev_if_decide")),
      assign("exp", list(op("conditional_pred"), reg("exp"))),
      go_to(label("eval_dispatch")), // evaluate the predicate
      
      "ev_if_decide",
      restore("continue"),
      restore("env"),
      restore("exp"),
      test(list(op("is_true"), reg("val"), constant(true))),
      branch(label("ev_if_consequent")),
      
      "ev_if_alternative",
      assign("exp", list(op("conditional_alt"), reg("exp"))),
      go_to(label("eval_dispatch")),
      
      "ev_if_consequent",
      assign("exp", list(op("conditional_cons"), reg("exp"))),
      go_to(label("eval_dispatch")),
      
      // function eval_assignment(stmt, env) {
      //   const value = evaluate(assignment_value(stmt), env);
      //   assign_symbol_value(assignment_symbol(stmt), value, env);
      //   return value;
      // }
      "ev_assignment",
      assign("unev", list(op("assignment_symbol"), reg("exp"))),
      save("unev"), // save variable for later
      assign("exp", list(op("assignment_value"), reg("exp"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_assignment_1")),
      go_to(label("eval_dispatch")), // evaluate the assignment value
      
      "ev_assignment_1",
      restore("continue"),
      restore("env"),
      restore("unev"),
      perform(
      list(op("assign_symbol_value"), reg("unev"), reg("val"), reg("env"))
      ),
      assign("val", constant("ok")),
      go_to(reg("continue")),
      
      // evaluation of a constant declaration evaluates
      // the right-hand expression and binds the
      // name to the resulting value in the
      // first (innermost) frame
      
      // function eval_constant_declaration(stmt, env) {
      //   assign_symbol_value(
      //     constant_declaration_symbol(stmt),
      //     evaluate(constant_declaration_value(stmt), env),
      //     env
      //   );
      // }
      "ev_variable_declaration",
      assign("unev", list(op("variable_declaration_symbol"), reg("exp"))),
      save("unev"), // save variable for later
      assign("exp", list(op("variable_declaration_value"), reg("exp"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_variable_declaration_1")),
      go_to(label("eval_dispatch")), // evaluate the declaration value
      
      "ev_variable_declaration_1",
      restore("continue"),
      restore("env"),
      restore("unev"),
      perform(list(op("declare_value"), reg("unev"), reg("val"), reg("env"))),
      assign("val", constant("ok")),
      go_to(reg("continue")),
      
      "ev_constant_declaration",
      assign("unev", list(op("constant_declaration_symbol"), reg("exp"))),
      save("unev"), // save constant for later
      assign("exp", list(op("constant_declaration_value"), reg("exp"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_constant_declaration_1")),
      go_to(label("eval_dispatch")), // evaluate the declaration value
      
      "ev_constant_declaration_1",
      restore("continue"),
      restore("env"),
      restore("unev"),
      perform(list(op("declare_value"), reg("unev"), reg("val"), reg("env"))),
      assign("val", constant("ok")),
      go_to(reg("continue")),
      
      // Error handling
      "unknown_expression_type",
      assign("val", constant("unknown_expression_type_error")),
      assign("val", reg("exp")),
      go_to(label("signal_error")),
      
      "unknown_procedure_type",
      restore("continue"), /// clean up stack (from apply_dispatch)
      assign("val", constant("unknown_procedure_type_error")),
      go_to(label("signal_error")),
      
      "signal_error",
      perform(list(op("user_print"), constant("EC_eval error:"), reg("val"))),
      go_to(label("evaluator_done")),
      
      "read_eval_print_loop",
      assign("exp", list(op("prompt_for_input"), constant("/// EC_Eval input:"))),
      assign("continue", label("print_result")),
      go_to(label("eval_dispatch")),
      "print_result",
      
      perform(list(op("user_print"), constant("EC-evaluate value:"), reg("val"))),
      //go_to(label("read_eval_print_loop")), /// Comment out to avoid infinite loop
      
      "evaluator_done"
      )
  );
}

const program = "           \
function test1() {          \
    display('A', 1);        \
    const result = test2(); \
    return display(result, 3);     \
    display('X', 7);        \
}                           \
function test2() {          \
    display('B', 2);        \
    return 'C';             \
    display('X', 4);        \
}                           \
function test3() {          \
    display('hej!');        \
}                           \
function test4() {          \
    return display('hej!');        \
}                           \
display(test1(), 5);        \
display(test3(), 6);        \
display(test4(), 8);";

function prompt_for_input(p) {
    const x = make_block(parse(program));
    return x;
}
// function prompt_for_input(p) {
//     const program_block = make_block(parse("function plus(a,b) { return a > 0 ? plus(a-1,b+1) : a + b; } plus(2,3);"));//prompt(p)));
//     const program_block2 = make_block(parse("2+3;"));//prompt(p)));
//     return program_block;
// }

const m = eceval();
set_register_contents(m, "exp", "1;");

start(m);
get_register_contents(m, "val");

</JAVASCRIPT_RUN>
      <JAVASCRIPT>
const the_global_environment = setup_environment();

start(eceval);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
;;; EC-Eval input:
function plus(a, b) {
    return a + b;
}
;;; EC-Eval value:
ok

;;; EC-Eval input:
plus(40, 2);
;;; EC-Eval value:
42
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Of course, evaluating expressions in this way will take much longer
    than if we had directly typed them into Scheme, because of the
    multiple levels of simulation involved.  Our expressions are evaluated
    by the explicit-control-evaluator machine, which is being simulated by
    a Scheme program, which is itself being evaluated by the Scheme
    interpreter.
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>running|)</SUBINDEX></INDEX>
  </TEXT>

  <SUBHEADING> 
    <NAME>Monitoring the performance of the evaluator</NAME>
  </SUBHEADING>

  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>monitoring performance (stack use)|(</SUBINDEX></INDEX>
  <TEXT>
    <INDEX>simulation<SUBINDEX>machine@as machine-design tool</SUBINDEX></INDEX>
    Simulation can be a powerful tool to guide the implementation of
    evaluators.  Simulations make it easy not only to explore variations
    of the register-machine design but also to monitor the performance of
    the simulated evaluator.  For example, one important factor in
    performance is how efficiently the evaluator uses the stack.  We can
    observe the number of stack operations required to evaluate various
    expressions by defining the evaluator register machine with the
    version of the simulator that collects statistics on stack use
    (section<SPACE/><REF NAME="sec:monitor"/>), and adding an instruction at the
    evaluator<APOS/>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>print-result</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>print_result</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    entry point to print the statistics:
    <!--  \indcode*{print-result}[monitored-stack version] -->
    <!--  \indcode*{print-result}[monitored-stack version] -->
    <SNIPPET LATEX="yes">
      <SCHEME EVAL="no">
      print-result
      (perform (op print-stack-statistics))<EM>; added instruction</EM>
      (perform
      (op announce-output) (const ";;; EC-Eval value:"))
      ^$\ldots$^ ; same as before
      </SCHEME>
      <JAVASCRIPT>
"print_result",
    perform(op("print_stack_statistics")), // added instruction
    perform(op("announce_output"), constant("/// EC-Eval value:")),
    $\ldots$  // same as before
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Interactions with the evaluator now look like this:
    <SNIPPET EVAL="no">
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (factorial n)
(if (= n 1)
1
(* (factorial (- n 1)) n)))
(total-pushes = 3 maximum-depth = 3)
;;; EC-Eval value:
ok

;;; EC-Eval input:
(factorial 5)
(total-pushes = 144 maximum-depth = 28)
;;; EC-Eval value:
120
      </SCHEMEOUTPUT>
      <JAVASCRIPT_OUTPUT>
/// EC-Eval input:
function factorial (n) {
return n === 1 ?
1
n * factorial(n - 1); }
(total-pushes = 3 maximum-depth = 3)
/// EC-Eval value:
ok

/// EC-Eval input:
factorial(5);
(total-pushes = 144 maximum-depth = 28)
/// EC-Eval value:
120
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Note that the driver loop of the evaluator reinitializes the stack
    at the start of
    each interaction, so that the statistics printed will refer only to
    stack operations used to evaluate the previous expression.
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:tail-rec-fact"/>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion
    <SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    <!--  \indcode{factorial}[stack usage, interpreted] -->
    Use the monitored stack to explore the tail-recursive property of the
    evaluator (section<SPACE/><REF NAME="sec:sequence-evaluation"/>).  Start the
    evaluator and define the iterative <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    from section<SPACE/><REF NAME="sec:recursion-and-iteration"/>:
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (define (iter product counter)
      (if (&gt; counter n)
            product
            (iter (* counter product)
            (+ counter 1))))
      (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter, max_count) {
        return counter &gt; max_count
               ? product
               : fact_iter(counter * product,
                           counter + 1,
                           max_count);
    }

    return iter(1, 1, n);
}
      </JAVASCRIPT>
    </SNIPPET>
    Run the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with some small values of <LATEXINLINE>$n$</LATEXINLINE>.  Record the
    maximum stack depth and the number of pushes required to compute
    <LATEXINLINE>$n!$</LATEXINLINE> for each of these values.
    <OL>
      <LI>
	You will find that the maximum depth required to evaluate
	<LATEXINLINE>$n!$</LATEXINLINE> is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  What is that depth?
      </LI>
      <LI>
	Determine from your data a formula in terms of
	<LATEXINLINE>$n$</LATEXINLINE> for the total number of push operations
	used in evaluating <LATEXINLINE>$n!$</LATEXINLINE> for any
	<LATEXINLINE>$n \geq 1$</LATEXINLINE>. Note that the number of
	operations used is a linear function of <LATEXINLINE>$n$</LATEXINLINE>
	and is thus determined by two constants.
      </LI>
    </OL>
  </EXERCISE>

  <EXERCISE>
    <!--  \indcode{factorial}[stack usage, interpreted] -->
    For comparison with exercise<SPACE/><REF NAME="ex:tail-rec-fact"/>, explore
    the behavior of the following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for computing factorials recursively:
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return n === 1 
           ? 1
           : n * factorial(n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    By running this
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the monitored stack, determine, as a function of
    <LATEXINLINE>$n$</LATEXINLINE>, the maximum depth of the stack and the total
    number of pushes used in evaluating <LATEXINLINE>$n!$</LATEXINLINE> for
    <LATEXINLINE>$n \geq 1$</LATEXINLINE>.  (Again, these functions will be
    linear.)  Summarize your experiments by filling in the following table with
    the appropriate expressions in terms of <LATEXINLINE>$n$</LATEXINLINE>:
    <FIGURE src="img_original/527table.svg"></FIGURE>
    The maximum depth is a measure of the amount of space used by the
    evaluator in carrying out the computation, and the number of pushes
    correlates well with the time required.
    <LABEL NAME="ex:rec-fact"/>
  </EXERCISE>
      
  <EXERCISE>
    <LABEL NAME="ex:rec-fib"/>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion
    <SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    Modify the definition of the evaluator by changing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_sequence</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    as described in section<SPACE/><REF NAME="sec:sequence-evaluation"/> so that
    the evaluator is no longer tail-recursive.  Rerun your experiments from
    exercises<SPACE/><REF NAME="ex:tail-rec-fact"/>
    and<SPACE/><REF NAME="ex:rec-fact"/> to demonstrate that both versions of
    the <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    now require space that grows linearly with their input.
  </EXERCISE>

  <EXERCISE>
    <!--  \indcode{fib}[stack usage, interpreted] -->
    Monitor the stack operations in the tree-recursive Fibonacci computation:
    <SNIPPET EVAL="no">
      <SCHEME>
      <!--  \indcode*{fib}[tree-recursive version] -->
      (define (fib n)
      (if (&lt; n 2)
      n
      (+ (fib (- n 1)) (fib (- n 2)))))
      </SCHEME>
      <JAVASCRIPT>
<!--  \indcode*{fib}[tree-recursive version] -->
function fib(n) {
    return n &lt; 2 ? n : fib(n - 1) + fib(n - 2);
}
      </JAVASCRIPT>
    </SNIPPET>
    <OL>
      <LI>
	Give a formula in terms of <LATEXINLINE>$n$</LATEXINLINE> for the
	maximum depth of the stack required to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  Hint: In
	section<SPACE/><REF NAME="sec:tree-recursion"/> we argued that the space
	used by this process grows linearly with <LATEXINLINE>$n$</LATEXINLINE>.
      </LI>
      <LI>
	Give a formula for the total number of pushes used to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  You should find that the number
	of pushes (which correlates well with the time used) grows exponentially
	with <LATEXINLINE>$n$</LATEXINLINE>.  Hint: Let
	<LATEXINLINE>$S(n)$</LATEXINLINE> be the number of pushes used in
	computing <LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE>.  You should be
	able to argue that there is a formula that expresses
	<LATEXINLINE>$S(n)$</LATEXINLINE> in terms of
	<LATEXINLINE>$S(n-1)$</LATEXINLINE>, <LATEXINLINE>$S(n-2)$</LATEXINLINE>,
	and some fixed <QUOTE>overhead</QUOTE> constant
	<LATEXINLINE>$k$</LATEXINLINE> that is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  Give the formula, and say what
	<LATEXINLINE>$k$</LATEXINLINE> is.  Then show that
	<LATEXINLINE>$S(n)$</LATEXINLINE> can be expressed as
	<LATEXINLINE>$a {\textrm{Fib}}(n+1) + b$</LATEXINLINE> and give the
	values of <LATEXINLINE>$a$</LATEXINLINE> and
	<LATEXINLINE>$b$</LATEXINLINE>.
      </LI>
    </OL>
  </EXERCISE>
  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>monitoring performance (stack use)|)</SUBINDEX></INDEX>

  <EXERCISE>
    <LABEL NAME="ex:interp-errors"/>
    <INDEX>error handling
    <SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>error handling</SUBINDEX></INDEX>
    Our evaluator currently catches and signals only two kinds of
    errors<EMDASH/>unknown expression types and unknown
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    types.  Other errors will take us out of the evaluator read-eval-print loop.
    When we run the evaluator using the register-machine simulator, these
    errors are caught by the underlying Scheme system.  This is analogous
    to the computer crashing when a user program makes an
    error.<FOOTNOTE>Regrettably, this is the normal state of affairs in
    <INDEX>C<SUBINDEX>error handling</SUBINDEX></INDEX>
    conventional compiler-based language systems such as C.  
    <INDEX>UNIX</INDEX>
    <INDEX>DOS/Windows</INDEX>
    <INDEX>Macintosh</INDEX>
    In UNIX<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE> the system <QUOTE>dumps
    core,</QUOTE> and in DOS/Windows<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE>
    it becomes catatonic. The
    Macintosh<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE> displays a picture of
    an exploding bomb and offers you the opportunity to reboot the
    computer<EMDASH/>if you<APOS/>re lucky.</FOOTNOTE>  It is a large project to
    make a real error system work, but it is well worth the effort to understand
    what is involved here.
    <OL>
      <LI>
	Errors that occur in the evaluation process, such as an attempt to
	access an unbound variable, could be caught by changing the lookup
	operation to make it return a distinguished condition code, which cannot
	be a possible value of any user variable.  The evaluator can test
	for this condition code and then do what is necessary to go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
	Find all of the places in the evaluator where such a
	change is necessary and fix them.  This is lots of work.
      </LI>
      <LI>
	Much worse is the problem of handling errors that are signaled by
	applying primitive
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	such as an attempt to divide by zero or an attempt to extract the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of a symbol.  In a professionally written high-quality system, each
	primitive application is checked for safety as part of the primitive.
	For example, every call to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	could first check that the argument is a pair.  If the argument is not
	a pair, the application would return a distinguished condition code to
	the evaluator, which would then report the failure.  We could arrange
	for this in our register-machine simulator by making each primitive
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	check for applicability and returning an appropriate distinguished
	condition code on failure. Then the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>primitive-apply</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>primitive_apply</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	code in the evaluator can check for the condition code and go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	if necessary.  Build this structure and make it work.
	This is a major project.
      </LI>
    </OL>
  </EXERCISE>
  <INDEX>explicit-control evaluator for Scheme|)</INDEX>
</SUBSECTION>
