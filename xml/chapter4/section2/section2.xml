<SECTION>
  <NAME>
    <SPLITINLINE>
      <SCHEME>Variations on a Scheme:</SCHEME>
    </SPLITINLINE>
    Lazy Evaluation
</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:lazy-evaluation"/>
  <INDEX>lazy evaluator|(</INDEX>
  <INDEX>delayed evaluation<SUBINDEX>lazy@in lazy evaluator|(</SUBINDEX></INDEX>

  <TEXT>
    <INDEX>programming language<SUBINDEX>design of</SUBINDEX></INDEX>
    <INDEX>embedded language, language design using</INDEX>
    Now that we have an evaluator expressed as a
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    program, we can experiment with alternative choices in language design
    simply by modifying the evaluator.  Indeed, new languages are often
    invented by first writing an evaluator that embeds the new language
    within an existing high-level language.  For example, if we wish to
    discuss some aspect of a proposed modification to
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    with another member of the
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    community, we can supply an evaluator that embodies
    the change.  The recipient can then experiment with the new
    evaluator and send back comments as further modifications.  Not only
    does the high-level implementation base make it easier to test and
    debug the evaluator; in addition, the embedding enables the designer
    to snarf<FOOTNOTE>Snarf: <QUOTE>To grab, especially a large document or
    <INDEX>snarf</INDEX><INDEX>Steele, Guy Lewis Jr.</INDEX>
    <INDEX>Raymond, Eric</INDEX>
    file for the purpose of using it either with or without the owner<APOS/>s
    permission.</QUOTE>  Snarf down: <QUOTE>To snarf, sometimes with the
    connotation of absorbing, processing, or understanding.</QUOTE>
    (These definitions were snarfed from 
    <CITATION>Steele et al.<SPACE/>1983</CITATION>.  
    See also <CITATION>Raymond 1993</CITATION>.)</FOOTNOTE> features
    from the underlying language, just as our embedded
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    evaluator uses primitives and control structure from the underlying
    <SPLITINLINE>
      <SCHEME>Lisp.</SCHEME>
      <JAVASCRIPT>JavaScript.</JAVASCRIPT>
    </SPLITINLINE>
    Only later (if ever) need the designer go to the trouble of building a
    complete implementation in a low-level language or in hardware.  In
    this section and the next we explore some variations on
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    that provide significant additional expressive power.
  </TEXT>

  <!-- Subsection 1 : Normal Order and Applicative Order -->
  &subsection4.2.1;

  <!-- Subsection 2 : An Interpreter with Lazy Evaluation -->
  &subsection4.2.2;

  <!-- Subsection 3 : Streams as Lazy Lists -->
  &subsection4.2.3;

</SECTION>
