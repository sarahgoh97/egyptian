v<SUBSECTION>
  <NAME>
    The Core of the Evaluator
  </NAME>

  <TEXT>
    <LABEL NAME="sec:core-of-evaluator"/>

    <SPLIT>
      <SCHEME>
	<INDEX>metacircular evaluator for Scheme
	<SUBINDEX>eval@<SCHEMEINLINE>eval</SCHEMEINLINE> and 
	<SCHEMEINLINE>apply</SCHEMEINLINE>|(</SUBINDEX></INDEX>

	<FIGURE>
	  <FIGURE src="img_original/ch4-Z-G-1.svg"></FIGURE>
	  <LABEL NAME="fig:eval-apply_scheme"/>
	  <CAPTION>
	    The
	    <SCHEMEINLINE>eval</SCHEMEINLINE><ENDASH/><SCHEMEINLINE>apply</SCHEMEINLINE> 
	    cycle exposes the essence of a computer language.
	  </CAPTION>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>metacircular evaluator for JavaScript
	<SUBINDEX>evaluate@<SCHEMEINLINE>evaluate</SCHEMEINLINE> and 
	<SCHEMEINLINE>apply</SCHEMEINLINE>|(</SUBINDEX></INDEX>
	<FIGURE>
	  <FIGURE src="img_javascript/ch4-Z-G-1.svg"></FIGURE>
	  <LABEL NAME="fig:eval-apply"/>
	  <CAPTION>
	    The
	    <SCHEMEINLINE>evaluate</SCHEMEINLINE><ENDASH/><SCHEMEINLINE>apply</SCHEMEINLINE> 
	    cycle exposes the essence of a computer language.
	  </CAPTION>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    The evaluation process can be described as the interplay between two
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <JAVASCRIPT>functions:</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and <SCHEMEINLINE>apply</SCHEMEINLINE>.
  </TEXT>
  
  <SUBHEADING>
    <NAME><SPLITINLINE>
      <SCHEME>Eval</SCHEME>
      <JAVASCRIPT>The function 
      <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    </NAME>
  </SUBHEADING>

  <TEXT>
    <COMMENT>
      In JavaScript's strict mode<EMDASH/>our preferred way to run JavaScript
      programs<EMDASH/>the name <JAVASCRIPTINLINE>eval</JAVASCRIPTINLINE> cannot
      be declared in user programs. It is reserved for a related but quite
      different pre-declared function. We opt for the complete word
      <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE> as a replacement.
    </COMMENT>
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes as arguments
    <SPLITINLINE><JAVASCRIPT>a statement or</JAVASCRIPT></SPLITINLINE> an
    expression<SPLITINLINE><JAVASCRIPT><FOOTNOTE>We see no
    need to distinguish between expressions and statements in our evaluator. For
    example, we do not need to differentiate between expressions and expression
    statements; we represent them identically and consequently they are handled
    in the same way by the <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
    function. JavaScript is syntactically restricted such that statements cannot
    appear inside of expressions except in function bodies, but our evaluator is
    going to ignore such restrictions. For example, JavaScript does not allow
    nesting of return statements inside of expressions, but our evaluator would
    happily accept programs in which such nesting occurs, provided that we
    represent them appropriately, according to
    section<SPACE/><REF NAME="sec:representing-expressions"/>.</FOOTNOTE> 
    </JAVASCRIPT></SPLITINLINE> and an environment. It  classifies the 
    <SPLITINLINE>
      <SCHEME>expression</SCHEME>
      <JAVASCRIPT>statement/expression</JAVASCRIPT>
    </SPLITINLINE> 
    and directs its evaluation.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is structured as a case analysis of the syntactic type of the
    <SPLITINLINE>
      <SCHEME>expression</SCHEME>
      <JAVASCRIPT>statement/expression</JAVASCRIPT>
    </SPLITINLINE> 
    to be evaluated.  In order to keep the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    general, we express
    the determination of the type of 
    <SPLITINLINE><SCHEME>an expression</SCHEME>
    <JAVASCRIPT>a statement/expression</JAVASCRIPT></SPLITINLINE>
    abstractly, making no
    commitment to any particular 
    <INDEX>metacircular evaluator for Scheme
    <SUBINDEX>expression representation</SUBINDEX></INDEX>
    representation for the various types of
    <SPLITINLINE><SCHEME>expressions.</SCHEME>
    <JAVASCRIPT>statements/expressions.</JAVASCRIPT></SPLITINLINE>
    Each type of 
    <SPLITINLINE><SCHEME>expression</SCHEME>
    <JAVASCRIPT>statement/expression</JAVASCRIPT></SPLITINLINE>
    has a predicate that tests for
    it and an abstract means for selecting its parts.  This 
    <INDEX>metacircular evaluator for Scheme
    <SUBINDEX>data abstraction in</SUBINDEX></INDEX>
    <INDEX>abstract syntax<SUBINDEX>in metacircular evaluator</SUBINDEX></INDEX>
    <EM>abstract syntax</EM> makes it easy to see how we can change the syntax of
    the language by using the same evaluator, but with a different collection of
    syntax
    <SPLITINLINE><SCHEME>procedures.</SCHEME>
    <JAVASCRIPT>functions.</JAVASCRIPT></SPLITINLINE>
  </TEXT>

  <SUBSUBHEADING>
    <NAME>Primitive expressions</NAME>
  </SUBSUBHEADING>
  
  <UL>
    <LI>
      <INDEX>expression<SUBINDEX>self-evaluating</SUBINDEX></INDEX>
      <INDEX>self-evaluating expression</INDEX>
      For self-evaluating expressions, such as numbers,
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      returns the expression itself.
    </LI>
    <LI>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>Eval</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT>The function
	<JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      must look up
      <SPLITINLINE>
	<SCHEME>variables</SCHEME>
	<JAVASCRIPT>names</JAVASCRIPT>
      </SPLITINLINE>
      in the environment to find their values.
    </LI>
  </UL>

  <SPLIT>
    <SCHEME>
      
      <SUBSUBHEADING>
	<NAME>Special forms</NAME>
      </SUBSUBHEADING>
      
      <TEXT>
        <UL>
	  <LI>
	    For quoted expressions, 
	    <SCHEMEINLINE>eval</SCHEMEINLINE>
	    returns the expression that was
	    quoted.
	  </LI>
	  <LI>
	    An assignment to (or a definition of) a variable
	    must recursively call      
	    <SCHEMEINLINE>eval</SCHEMEINLINE>
	    to compute the new value to be associated with the variable.
	    The environment must be modified to change (or create) the
	    binding of the variable.
	  </LI>
	  <LI>
	    An if expression requires special processing of its parts, so as to
	    evaluate the consequent if the predicate is true, and otherwise to
	    evaluate the alternative.
	  </LI>
	  <LI>
	    A <SCHEMEINLINE>lambda</SCHEMEINLINE> expression
	    must be transformed into an applicable
	    procedure by packaging together the parameters and body
	    specified by the
	    <SCHEMEINLINE>lambda</SCHEMEINLINE>
	    expression with the environment of the evaluation.
	  </LI>
	  <LI>
	    A <SCHEMEINLINE>begin</SCHEMEINLINE> expression
	    requires evaluating its sequence of
	    expressions in the order in which they appear.
	  </LI>
	  <LI>
	    A case analysis (<SCHEMEINLINE>cond</SCHEMEINLINE>) is transformed
	    into a nest of <SCHEMEINLINE>if</SCHEMEINLINE>
	    expressions and then evaluated.
	  </LI>
        </UL>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      
      <SUBSUBHEADING>	
	<NAME>Language constructs</NAME>
      </SUBSUBHEADING>
      
      <TEXT>
        <UL>
	  <LI>
	    An assignment to (or a declaration of) a name must recursively call
	    <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE> to compute the new
	    value to be associated with the name.  The environment must be
	    modified to change the binding of the name.
	  </LI>
	  <LI>
	    A conditional expression requires special processing of its parts,
	    so as to evaluate the consequent if the predicate is true, and
	    otherwise to evaluate the alternative.
	  </LI>
	  <LI>
	    A lambda expression must be transformed into an applicable
	    function by packaging together the parameters and body specified
	    by the lambda expression with the environment of the evaluation.
	  </LI>
	  <LI>
	    A sequence of statements requires evaluating its component
	    statements in the order in which they appear.
	  </LI>
	  <LI>
	    A block requires evaluating its body, while ensuring that
	    declarations within the block remain local to the block.
	  </LI>
	  <LI>
	    When <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE> encounters a
	    <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE> statement, the
	    <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE> expression is
	    evaluated and marked as a return value. 
	  </LI>
        </UL>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <SUBSUBHEADING>
    <NAME>Combinations</NAME>
  </SUBSUBHEADING>
  
  <SPLIT>
    <SCHEME>
      <TEXT>
        <UL>
	  <LI>
	    For a procedure application, <SCHEMEINLINE>eval</SCHEMEINLINE>
	    must recursively evaluate the operator part and the operands of
	    the combination.  The resulting procedure
	    and arguments are passed to <SCHEMEINLINE>apply</SCHEMEINLINE>,
	    which handles the actual procedure application.
	  </LI>
        </UL>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        <UL>
	  <LI>
	    An operator combination is treated as a function application.
	    The operator symbol is the name of the function being applied, and
	    the operands are the arguments. Thus 
	    <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE> does not need any
	    rules for operators combinations.
	  </LI>
	  <LI>
	    For a function application,
	    <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE> must recursively
	    evaluate the function expression and the arguments of the
	    application.  The resulting function and arguments are passed to
	    <SCHEMEINLINE>apply</SCHEMEINLINE>, which handles the actual
	    function application.
	  </LI>
        </UL>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  
  <TEXT>
    <!-- \indcodeplus*{eval}{(metacircular)}-->
    Here is the definition of
    <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE>:</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="365" HIDE="yes">
      <NAME>headline_4_1_1</NAME>
      <JAVASCRIPT>
// functions from SICP JS 4.1.1
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="365">
      <NAME>eval</NAME>
      <EXAMPLE>eval_example</EXAMPLE>
      <EXPECTED>3</EXPECTED>
      <SCHEME>
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type - - EVAL" exp))))
      </SCHEME>
      <JAVASCRIPT>
function evaluate(stmt, env) {
   return is_self_evaluating(stmt)
          ?  stmt
          : is_name(stmt)
          ? lookup_symbol_value(symbol_of_name(stmt), env)
          : is_constant_declaration(stmt)
          ? eval_constant_declaration(stmt, env)
          : is_variable_declaration(stmt)
          ? eval_variable_declaration(stmt, env)
          : is_assignment(stmt)
          ? eval_assignment(stmt, env)
          : is_conditional_expression(stmt)
          ? eval_conditional_expression(stmt, env)
          : is_lambda_expression(stmt)
          ? make_function(lambda_parameters(stmt),
                          lambda_body(stmt),
                          env)
          : is_sequence(stmt)
          ? eval_sequence(sequence_statements(stmt), env)
          : is_block(stmt)
          ? eval_block(stmt, env)
          : is_return_statement(stmt)
          ? eval_return_statement(stmt, env)
          : is_application(stmt)
          ? apply(evaluate(function_expression(stmt), env),
                  list_of_values(args(stmt), env))
          : error(stmt, "Unknown syntax -- evaluate");
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="365" HIDE="yes">
      <NAME>eval_example</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <SCHEME>
(define the-global-environment (setup-environment))
(eval (read) the-global-environment)
      </SCHEME>
      <JAVASCRIPT>
const my_program = parse("1; { true; 3; }");
evaluate(my_program, the_empty_environment);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>data-directed programming
    <SUBINDEX>case analysis vs.</SUBINDEX></INDEX>
    <INDEX>case analysis
    <SUBINDEX>data-directed programming vs.</SUBINDEX></INDEX>
    For clarity, 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    has been implemented as a case analysis using
    <SPLITINLINE><SCHEME><SCHEMEINLINE>cond</SCHEMEINLINE>.</SCHEME>
    <JAVASCRIPT>conditional expressions.</JAVASCRIPT></SPLITINLINE>
    The disadvantage of this is that our
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    handles only a few distinguishable types of 
    <SPLITINLINE>
      <JAVASCRIPT>statements and</JAVASCRIPT>
    </SPLITINLINE>
    expressions, and no new ones can be defined without editing the
    definition of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    In most
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>interpreter</JAVASCRIPT>
    </SPLITINLINE>
    implementations, dispatching on the type of
    <SPLITINLINE>
      <SCHEME>an expression</SCHEME>
      <JAVASCRIPT>a statement or expression</JAVASCRIPT>
    </SPLITINLINE>
    is done in a data-directed style.  This allows a user to add new types of    
    <SPLITINLINE>
      <SCHEME>expressions that <SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>statements and expressions that
      <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    can distinguish, without modifying the definition of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    itself. (See exercise<SPACE/><REF NAME="ex:data-directed-eval"/>.)
  </TEXT>

  <SUBHEADING>
    <NAME>Apply</NAME>
  </SUBHEADING>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Apply</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes two arguments, a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    and a list of arguments  to which the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    should be applied.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Apply</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    classifies
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    into two kinds: It calls 
    <!--  \indcode{apply-primitive-procedure} -->
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>apply_primitive_function</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to apply primitives; it applies compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    by sequentially evaluating the 
    <SPLITINLINE>
      <SCHEME>expressions that make up the body of the procedure.</SCHEME>
      <JAVASCRIPT>statements that make up the body of the function.</JAVASCRIPT>
    </SPLITINLINE>
    The environment for the evaluation of the body of a compound
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is constructed by extending the base environment carried by the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to include a frame that binds the parameters of the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to the arguments to which the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is to be applied. 
    Here is the definition of <SCHEMEINLINE>apply</SCHEMEINLINE>:
    <SNIPPET PAGE="366">
      <NAME>apply</NAME>
      <EXAMPLE>apply_example</EXAMPLE>
      <EXPECTED>3</EXPECTED>
      <SCHEME>
(define (apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
           (procedure-body procedure)
           (extend-environment
             (procedure-parameters procedure)
             arguments
             (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type - - APPLY" procedure))))
      </SCHEME>
      <JAVASCRIPT>
function apply(fun, args) {
   if (is_primitive_function(fun)) {
      return apply_primitive_function(fun, args);
   } else if (is_compound_function(fun)) {
      const result = evaluate(function_body(fun),
                         extend_environment(
                             function_parameters(fun),
                             args,
                             function_environment(fun)));
      return is_return_value(result)
             ? return_value_content(result)
             : undefined;
   } else {
      error(fun, "Unknown function type -- apply");
   }
}
      </JAVASCRIPT>
    </SNIPPET>
    <COMMENT>
      The name <JAVASCRIPTINLINE>arguments</JAVASCRIPTINLINE>
      is reserved in JavaScript's strict mode. We chose
      <JAVASCRIPTINLINE>args</JAVASCRIPTINLINE> instead.
    </COMMENT>
    <SNIPPET PAGE="366" HIDE="yes">
      <NAME>apply_example</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <JAVASCRIPT>
const plus = list("primitive", (x, y) => x + y);
apply(plus, list(1, 2));
      </JAVASCRIPT>
    </SNIPPET>
    
    <SPLIT>
      <JAVASCRIPT>
	In order to return a value, JavaScript functions need to evaluate a
	return statement. If a function terminates without return, the value 
	<JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> is returned. Thus, if
	the evaluation of the function body yields a return value, the content
	of the return value is retrieved, and otherwise the value
	<JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> is returned.
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <SUBHEADING>
    <NAME>
    <SPLITINLINE>
      <SCHEME>Procedure</SCHEME>
      <JAVASCRIPT>Function</JAVASCRIPT>
    </SPLITINLINE>
      arguments
    </NAME>
  </SUBHEADING>

  <TEXT>
    When
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>evaluate</SCHEMEINLINE></JAVASCRIPT>
    </SPLITINLINE>
    processes a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    application, it uses
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>list-of-values</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list_of_values</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to produce the list of arguments to which the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is to be applied.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>List-of-values</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>list_of_values</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes as an argument the
    <SPLITINLINE>
      <SCHEME>operands of the combination.</SCHEME>
      <JAVASCRIPT>arguments of the application.</JAVASCRIPT>
    </SPLITINLINE>
    It evaluates each
    <SPLITINLINE>
      <SCHEME>operand</SCHEME>
      <JAVASCRIPT>argument</JAVASCRIPT>
    </SPLITINLINE>
    and returns a
    list of the corresponding values:<FOOTNOTE>We could have simplified the 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>application?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_application</JAVASCRIPTINLINE> function
      </JAVASCRIPT>
    </SPLITINLINE>
    clause in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>evaluate</SCHEMEINLINE></JAVASCRIPT>
    </SPLITINLINE>
    by using
    <SCHEMEINLINE>map</SCHEMEINLINE> (and stipulating that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>operands</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>args</SCHEMEINLINE></JAVASCRIPT>
    </SPLITINLINE>
    returns a list) rather than writing
    an explicit
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>list-of-values</SCHEMEINLINE> procedure.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>list_of_values</JAVASCRIPTINLINE>
      function.
      </JAVASCRIPT>
    </SPLITINLINE>
    We chose not to use <SCHEMEINLINE>map</SCHEMEINLINE> here to emphasize the
    fact that the
    <INDEX>metacircular evaluator for Scheme<SUBINDEX>higher-order
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> in </SUBINDEX></INDEX>
    <INDEX>higher-order <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    <SUBINDEX>in metacircular evaluator</SUBINDEX></INDEX>
    evaluator can be implemented without any use of higher-order
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (and thus could be written in a language that doesn<APOS/>t
    have higher-order
    <SPLITINLINE>
      <SCHEME>procedures),</SCHEME>
      <JAVASCRIPT>functions),</JAVASCRIPT>
    </SPLITINLINE>
    even though the language that it supports
    will include higher-order
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    <LABEL NAME="foot:mceval-higher-order"/></FOOTNOTE>
    <SNIPPET PAGE="367">
      <NAME>list_of_values</NAME>
      <EXAMPLE>list_of_values_example</EXAMPLE>
      <SCHEME>
(define (list-of-values exps env)
  (if (no-operands? exps)
      \&apos;()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))
      </SCHEME>
      <JAVASCRIPT>
function list_of_values(exps, env) {
     return no_args(exps)
         ? null
         : pair(evaluate(first_arg(exps), env),
                list_of_values(rest_args(exps), env));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="365" HIDE="yes">
      <NAME>list_of_values_example</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <SCHEME>
(define the-global-environment (setup-environment))
(eval (read) the-global-environment)
      </SCHEME>
      <JAVASCRIPT>
const my_addition_expression = parse("1 + 2;");
list_of_values(list(1, my_addition_expression, 7),
               the_global_environment);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  
  <SUBHEADING>
    <NAME>
      <SPLITINLINE>
	<SCHEME>Conditionals</SCHEME>
	<JAVASCRIPT>Conditional expressions</JAVASCRIPT>
      </SPLITINLINE>
    </NAME>
  </SUBHEADING>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Eval-if</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>eval_conditional_expression</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    evaluates the predicate part of 
    <SPLITINLINE>
      <SCHEME>an <SCHEMEINLINE>if</SCHEMEINLINE> expression</SCHEME>
      <JAVASCRIPT>a conditional expression</JAVASCRIPT>
    </SPLITINLINE>
    in the given environment.  If the result is true, 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-if</SCHEMEINLINE>
      evaluates the consequent, otherwise it evaluates the alternative:
      </SCHEME>
      <JAVASCRIPT>
	the consequent is evaluated, otherwise the alternative:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="367">
      <NAME>eval_if</NAME>
      <EXAMPLE>eval_if_example</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
      </SCHEME>
      <JAVASCRIPT>
function eval_conditional_expression(stmt, env) {
    return is_true(evaluate(cond_expr_pred(stmt), env))
           ? evaluate(cond_expr_cons(stmt), env)
           : evaluate(cond_expr_alt(stmt), env);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="367" HIDE="yes">
      <NAME>eval_if_example</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <JAVASCRIPT>
const my_cond_expr = parse("true ? 1 : 2;");
eval_conditional_expression(my_cond_expr, the_empty_environment);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>metacircular evaluator for Scheme
    <SUBINDEX>implemented language vs.<SPACE/>implementation language
    </SUBINDEX></INDEX>
    The use of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>true?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_true</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-if</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>eval_conditional_expression</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    highlights the issue of the connection between an implemented language and
    an implementation language.  The 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>if-predicate</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>predicate</JAVASCRIPT>
    </SPLITINLINE>
    is evaluated in the language being implemented and thus yields a value in
    that language.  The interpreter predicate 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>true?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_true</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    translates that value into a value that can be tested by the
    <SPLITINLINE><SCHEME><SCHEMEINLINE>if</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT>conditional expression</JAVASCRIPT></SPLITINLINE>
    in the implementation language: The metacircular representation of truth
    might not be the same as that of the underlying 
    <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>In this case, the language being implemented and the
    implementation language are the same.  Contemplation of the meaning of
    <INDEX>consciousness, expansion of</INDEX>
    <SPLITINLINE><SCHEME><SCHEMEINLINE>true?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_true</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    here yields expansion of consciousness without the abuse of
    substance.</FOOTNOTE>
  </TEXT>

  <SUBHEADING>
    <NAME>Sequences</NAME>
  </SUBHEADING>

  <SPLIT>
    <SCHEME>
      <TEXT>
	<SCHEMEINLINE>Eval-sequence</SCHEMEINLINE> is used by
	<SCHEMEINLINE>apply</SCHEMEINLINE> to evaluate the sequence of
	expressions in a procedure body and by <SCHEMEINLINE>eval</SCHEMEINLINE>
	to evaluate the sequence of expressions in a
	<SCHEMEINLINE>begin</SCHEMEINLINE> expression.  It takes as arguments a
	sequence of expressions and an environment, and evaluates the
	expressions in the order in which they occur.  The value returned is the
	value of the final expression.
	<SNIPPET PAGE="367">
          <NAME>eval_sequence</NAME>
          <SCHEME>
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
        (else (eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))
          </SCHEME>
	</SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	The function <JAVASCRIPTINLINE>eval_sequence</JAVASCRIPTINLINE>
	is used by <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
	to evaluate a sequence of statements at the toplevel, in a block.
	It takes as arguments a sequence of statements and an
	environment, and evaluates the statements in the order in which they
	occur. The value returned is the value of the final statement, except
	if the result of evaluating any statement in the sequence yields
	a return value, that value is returned and the subsequent statements are
	ignored.
	<SNIPPET PAGE="367">
	  <NAME>eval_sequence</NAME>
	  <EXAMPLE>eval_sequence_example</EXAMPLE>
	  <EXPECTED>3</EXPECTED>
          <JAVASCRIPT>
function eval_sequence(stmts, env) {
    if (is_empty_sequence(stmts)) {
        return undefined;
    } else if (is_last_statement(stmts)) {
            return evaluate(first_statement(stmts),env);
    } else {
        const first_stmt_value = 
            evaluate(first_statement(stmts),env);
        if (is_return_value(first_stmt_value)) {
            return first_stmt_value;
        } else {
            return eval_sequence(
                rest_statements(stmts),env);
        }
    }
}
          </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET PAGE="367" HIDE="yes">
	  <NAME>eval_sequence_example</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
	  <JAVASCRIPT>
const my_sequence = head(tail(parse("1; true; 3;")));
eval_sequence(my_sequence, the_empty_environment);
	  </JAVASCRIPT>
	</SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <SPLIT>
    <SCHEME>
    </SCHEME>
    <JAVASCRIPT>
      <SUBHEADING>
	<NAME>Blocks</NAME>
      </SUBHEADING>
      <TEXT>
	The function <JAVASCRIPTINLINE>eval_block</JAVASCRIPTINLINE> is used by  
	<JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
	to evaluate block statements. The constants and variables
	declared in the block need to be local to the block. 
	The evaluation of block statements evaluates the body of the
	block with respect to an environment that extends the current
	environment with a binding of the local names of the block
	body to a special value
	<JAVASCRIPTINLINE>"*unassigned*"</JAVASCRIPTINLINE>.
	<SNIPPET PAGE="367">
          <NAME>list_of_unassigned</NAME>
          <JAVASCRIPT>
function list_of_unassigned(names) {
    return is_null(names)
        ? null
        : pair("*unassigned*", list_of_unassigned(tail(names)));	    
}
	  </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET PAGE="367">
          <NAME>eval_block</NAME>
          <REQUIRES>list_of_unassigned</REQUIRES>
          <REQUIRES>scan_out_declarations</REQUIRES>
	  <EXAMPLE>eval_block_example</EXAMPLE>
	  <EXPECTED>42</EXPECTED>
          <JAVASCRIPT>
function eval_block(stmt, env) {
    const body = block_body(stmt);
    const locals = scan_out_declarations(body);
    const unassigneds = list_of_unassigned(locals);
    return evaluate(body,
                extend_environment(locals, unassigneds, env));
}
          </JAVASCRIPT>
	</SNIPPET>
	The function <JAVASCRIPTINLINE>scan_out_declarations</JAVASCRIPTINLINE>
	collects the list of all names declared in the body statements. For a
	name to be included in the list, it needs to be declared outside of any
	other block.
	<SNIPPET>
          <NAME>scan_out_declarations</NAME>
	  <EXAMPLE>scan_out_declarations_example</EXAMPLE>
	  <EXPECTED>[ 'x', [ 'y', null ] ]</EXPECTED>
          <JAVASCRIPT>
function scan_out_declarations(stmt) {
    if (is_sequence(stmt)) {
        const stmts = sequence_statements(stmt);
        return is_empty_sequence(stmts)
            ? null
            : append(scan_out_declarations(first_statement(stmts)),
                     scan_out_declarations(make_sequence(
                                   rest_statements(stmts))));
    } else {
        return is_constant_declaration(stmt)
            ? list(constant_declaration_symbol(stmt))
            : is_variable_declaration(stmt)
              ? list(variable_declaration_symbol(stmt))
              : null;
    }
}
          </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET HIDE="yes">
          <NAME>scan_out_declarations_example</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
          <JAVASCRIPT>
scan_out_declarations(parse("const x = 1; let y = 2;"));
	  </JAVASCRIPT>
	</SNIPPET>
	The purpose of the lambda expression is purely to create a unique
	identity; the function will never be applied and its return value
	(here <JAVASCRIPTINLINE>null</JAVASCRIPTINLINE>) is irrelevant.
	<SNIPPET PAGE="367" HIDE="yes">
          <NAME>eval_block_example</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
          <JAVASCRIPT>
const my_block = parse("{ const x = 1; 3; 42; }");
eval_block(my_block, the_empty_environment);
	  </JAVASCRIPT>
	</SNIPPET>
      </TEXT>

      <SUBHEADING>
	<NAME>Return statements</NAME>
      </SUBHEADING>

      <TEXT>
	The function <JAVASCRIPTINLINE>eval_return_statement</JAVASCRIPTINLINE>
	is used by  
	<JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
	to evaluate return statements. As seen in the evaluation
	of sequences, the result of evaluation of return statements
	needs to be identifiable so that the evaluation of function
	bodies can return immediately, even if there are statements
	after the return statement. For this purpose,
	the evaluation of a return statement wraps the result of
	evaluating the return expression in a return value object.
	<SNIPPET PAGE="367">
          <NAME>eval_return</NAME>
	  <EXAMPLE>eval_return_example</EXAMPLE>
	  <EXPECTED>1</EXPECTED>
          <JAVASCRIPT>
function eval_return_statement(stmt, env) {
    return make_return_value(
               evaluate(return_expression(stmt),
                        env));
}
          </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET PAGE="367" HIDE="yes">
          <NAME>eval_return_example</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
          <JAVASCRIPT>
const my_program = parse("{ function f() { return 1; } f(); }");
evaluate(my_program, the_global_environment);
	  </JAVASCRIPT>
	</SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <SUBHEADING>
    <NAME>Assignments and
    <SPLITINLINE>
      <SCHEME>definitions</SCHEME>
      <JAVASCRIPT>declarations</JAVASCRIPT>
    </SPLITINLINE></NAME>
  </SUBHEADING>

  <TEXT>
    The following
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    handles assignments to variables.  It calls
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to find the value to be assigned and transmits the variable
    and the resulting value to 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-variable-value!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>assign_symbol_to_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to be installed  in the designated environment.
    <SNIPPET PAGE="368">
      <NAME>eval_assignment</NAME>
      <EXAMPLE>eval_assignment_example</EXAMPLE>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  \&apos;ok)
      </SCHEME>
      <JAVASCRIPT>
function eval_assignment(stmt, env) {
    const value = assign_symbol_value(assignment_symbol(stmt),
        evaluate(assignment_value(stmt), env),
        env);
    return value;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="368" HIDE="yes">
      <NAME>eval_assignment_example</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <JAVASCRIPT>
const my_program = parse("{ let x = 1; x = 2; }");
evaluate(my_program, the_global_environment);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SPLIT>
    <SCHEME>
      <TEXT>
	Definitions of variables are handled in a similar manner.<FOOTNOTE>This
	implementation of <SCHEMEINLINE>define</SCHEMEINLINE> ignores a subtle
	issue in the handling of internal definitions, although it works
	correctly in most cases.  We will see what the problem is and how to
	solve it in
	section<SPACE/><REF NAME="sec:internal-definitions"/>.</FOOTNOTE>
	<SNIPPET PAGE="368">
	  <NAME>eval_definition</NAME>
	  <REQUIRES>define_variable</REQUIRES>
	  <REQUIRES>definition</REQUIRES>
	  <REQUIRES>eval</REQUIRES>
	  <SCHEME>
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-value exp) env)
                    env)
  \&apos;ok)
	  </SCHEME>
	</SNIPPET>
      </TEXT>

      <TEXT>
	We have chosen here to return the symbol <SCHEMEINLINE>ok</SCHEMEINLINE>
	as the value of an assignment or a definition.<FOOTNOTE>As we said when
	we introduced <SCHEMEINLINE>define</SCHEMEINLINE> and 
        <SCHEMEINLINE>set!</SCHEMEINLINE>, these values
        are implementation-dependent in Scheme<EMDASH/>that is, the implementor
        can choose what value to return.</FOOTNOTE>
	<INDEX>metacircular evaluator for Scheme
	<SUBINDEX>eval@<SCHEMEINLINE>eval</SCHEMEINLINE> and
	<SCHEMEINLINE>apply</SCHEMEINLINE>|)</SUBINDEX></INDEX>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	Declarations of constants and variables are treated like assignments;
	they replace the current value of the name in the environment (which
	must be <JAVASCRIPTINLINE>"*unassigned*"</JAVASCRIPTINLINE>) by the
	result of evaluating the value statement.
	Exercise<SPACE/><REF NAME="ex:mutable"/> explains how we
	distinguish variables from constants and how we prevent
	assignment to constants.
	<SNIPPET PAGE="368">
	  <NAME>eval_definition</NAME>
	  <EXAMPLE>eval_definition_example</EXAMPLE>
	  <EXPECTED>3</EXPECTED>
	  <JAVASCRIPT>
function eval_variable_declaration(stmt, env) {
    assign_symbol_value(variable_declaration_symbol(stmt),
        evaluate(variable_declaration_value(stmt), env),
        env);
}   
function eval_constant_declaration(stmt, env) {
    assign_symbol_value(constant_declaration_symbol(stmt),
        evaluate(constant_declaration_value(stmt), env),
        env);
}
	  </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET PAGE="368" HIDE="yes">
	  <NAME>eval_definition_example</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
	  <JAVASCRIPT>
const my_program = parse("{ let x = 1; const y = 2; x + y; }");
evaluate(my_program, the_global_environment);
	  </JAVASCRIPT>
	</SNIPPET>
      </TEXT>
      <TEXT>
	Note that the returned value of constant and variable declaration is the
	value <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>, as prescribed by
	the ECMAScript standard (<CITATION>Ecma 1997</CITATION>).
	<INDEX>metacircular evaluator for Scheme
	<SUBINDEX>eval@<SCHEMEINLINE>eval</SCHEMEINLINE> and
	<SCHEMEINLINE>apply</SCHEMEINLINE>|)</SUBINDEX></INDEX>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  <SNIPPET PAGE="383" HIDE="yes">
    <NAME>functions_4_1_1</NAME>
    <REQUIRES>headline_4_1_1</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <REQUIRES>apply</REQUIRES>
    <REQUIRES>list_of_values</REQUIRES>
    <REQUIRES>eval_if</REQUIRES>
    <REQUIRES>eval_sequence</REQUIRES>
    <REQUIRES>eval_block</REQUIRES>
    <REQUIRES>eval_return</REQUIRES>
    <REQUIRES>eval_assignment</REQUIRES>
    <REQUIRES>eval_definition</REQUIRES>
    <JAVASCRIPT></JAVASCRIPT>
  </SNIPPET>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	<INDEX>order of evaluation
	<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
	<INDEX>metacircular evaluator for Scheme
	<SUBINDEX>order of operand evaluation</SUBINDEX></INDEX>
	Notice that we cannot tell whether the metacircular evaluator
	evaluates operands from left to right or from right to left.  Its
	evaluation order is inherited from the underlying Lisp:	If the
	arguments to <SCHEMEINLINE>cons</SCHEMEINLINE> in
	<SCHEMEINLINE>list-of-values</SCHEMEINLINE> are evaluated from left to
	right, then <SCHEMEINLINE>list-of-values</SCHEMEINLINE>	will evaluate
	operands from left to right; and if the arguments to
	<SCHEMEINLINE>cons</SCHEMEINLINE> are evaluated from right to left, then
	<SCHEMEINLINE>list-of-values</SCHEMEINLINE> will evaluate operands
	from right to left.
	<P/>
	Write a version of <SCHEMEINLINE>list-of-values</SCHEMEINLINE> that
	evaluates <SCHEME>operands</SCHEME> from left to right regardless of the
	order of evaluation in the underlying Lisp. Also write a version of
	<SCHEMEINLINE>list-of-values</SCHEMEINLINE> that evaluates
	operands from right to left.
	<LABEL NAME="ex:arg-eval-order_scheme"/>
      </EXERCISE>
    </SCHEME>
    <JAVASCRIPT>
      <EXERCISE>
	<INDEX>order of evaluation
	<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
	<INDEX>metacircular evaluator for Scheme
	<SUBINDEX>order of operand evaluation</SUBINDEX></INDEX>
	Notice that we cannot tell whether the metacircular evaluator
	evaluates arguments from left to right or from right to left.  Its
	evaluation order is inherited from the function
	<JAVASCRIPTINLINE>map</JAVASCRIPTINLINE> of the underlying JavaScript
	environment: If the arguments to
	<JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE> in
	<JAVASCRIPTINLINE>map</JAVASCRIPTINLINE> are evaluated from left to
	right, then <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE> will evaluate
	arguments from left to right; and if the arguments to
	<JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE> are evaluated from right to
	left, then <SCHEMEINLINE>evaluate</SCHEMEINLINE> will evaluate
	arguments from right to left.
	<P/>
	Write a version of <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
	that evaluates arguments from left to right regardless of the order of
	evaluation in the underlying JavaScript. Also write a version of
	<JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE> that evaluates
	arguments from right to left.
	<LABEL NAME="ex:arg-eval-order"/>
      </EXERCISE>
    </JAVASCRIPT>
  </SPLIT>

  <!-- test cases -->
  
  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate</NAME>
    <REQUIRES>functions_4_1_1</REQUIRES>
    <REQUIRES>functions_4_1_2</REQUIRES>
    <REQUIRES>functions_4_1_3</REQUIRES>
    <REQUIRES>functions_4_1_4</REQUIRES>
    <JAVASCRIPT>
function parse_and_evaluate(input) {
    const program = parse(input);
    const locals = scan_out_declarations(program);
    const unassigneds = list_of_unassigned(locals);
    const program_env = extend_environment(locals, unassigneds,
                                       the_global_environment);
    return evaluate(program, program_env);
}
    </JAVASCRIPT>
  </SNIPPET>

  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_test_factorial</NAME>
    <REQUIRES>parse_and_evaluate</REQUIRES>
    <EXPECTED>120</EXPECTED>
    <JAVASCRIPT>
parse_and_evaluate("               \
function factorial(n) {            \
    return n === 1                 \
           ? 1                     \
           : n * factorial(n - 1); \
}                                  \
factorial(5);                      ");
    </JAVASCRIPT>
  </SNIPPET>
  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_test_append</NAME>
    <REQUIRES>parse_and_evaluate</REQUIRES>
    <EXPECTED>[ 'b', [ 'c', [ 'd', null ] ] ]</EXPECTED>
    <JAVASCRIPT>
parse_and_evaluate("                                \
function append(xs, ys) {                           \
    return is_null(xs)                              \
           ? ys                                     \
           : pair(head(xs), append(tail(xs), ys));  \
}                                                   \
tail(append(list('a', 'b'), list('c', 'd')));       ");
    </JAVASCRIPT>
  </SNIPPET>
  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_test_map</NAME>
    <REQUIRES>parse_and_evaluate</REQUIRES>
    <EXPECTED>[ 3, [ 4, [ 5, null ] ] ]</EXPECTED>
    <JAVASCRIPT>
parse_and_evaluate("                              \
function map(f, xs) {                             \
    return is_null(xs)                            \
           ? null                                 \
           : pair(f(head(xs)), map(f, tail(xs))); \
}                                                 \
tail(map(x => x + 1, list(1, 2, 3, 4)));          ");
    </JAVASCRIPT>
  </SNIPPET>
</SUBSECTION>


