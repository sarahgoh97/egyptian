<SUBSECTION>
  <NAME>Tree Recursion</NAME>

  <LABEL NAME="sec:tree-recursion"/>
  <INDEX>tree-recursive process|(</INDEX>
  <INDEX>process<SUBINDEX>tree-recursive|(</SUBINDEX></INDEX>
  <INDEX>recursive process<SUBINDEX>tree|(</SUBINDEX></INDEX>

    <TEXT>
      [<EM>
        In this subsection, the original authors used Fibonacci numbers to
        demonstrate tree recursion. It was also used to demonstrate the
        differences and similarities between recursive and iterative methods.
        Instead of the Fibonacci numbers, the Stern-Brocot sequence was used
        instead as it is linked to the continued fraction algorithm. Also, the
        splitting method is introduced at the end, with the tree-recursive method.
      </EM>]
    </TEXT>

  <TEXT>
    Another common pattern of computation is called <EM>tree recursion</EM>.
    As an example, consider computing the Stern-Brocot
    <INDEX>Stern-Brocot</INDEX> sequence:
    <LATEX>
      \[ 1, 1, 2, 1, 3, 2, 3, 1, 4, 3, 5, 2, 5, 3, 4, \ldots \]
    </LATEX>
    This sequence is used to form a tree called the Stern-Brocot tree, which was
    discovered independently by Moritz Stern and Achille Brocot in the 1800s
    (Krishnan, Älgmer, and Kogler 2019). The figure below shows the tree
    formed by the sequence. The sequence is seen by looking at the numerators
    from left to right or the denominators from right to left.

    <FIGURE>
      <JAVASCRIPT>
        <FIGURE src="img_egypt/ch1-Z-G-11.svg"></FIGURE>
      </JAVASCRIPT>
      <LABEL NAME="fig:stern-fraction-tree"/>
      <CAPTION>The Stern-Brocot Tree until the 15th term, reading from left to
          right (adapted from Krishnan, Älgmer, and Kogler 2019).
      </CAPTION>
    </FIGURE>

    Relating to Egyptian Fractions, when reading the tree from left to right,
    the sequence of fractions found are a unit fraction apart from one another.
    Starting from <LATEXINLINE>$\frac{1}{4}$</LATEXINLINE>, the next fraction is
     <LATEXINLINE>$\frac{1}{3}$</LATEXINLINE>. When comparing these 2 fractions,
    we see that
    <LATEXINLINE>$\frac{1}{3} - \frac{1}{4} = \frac{1}{12}$</LATEXINLINE>, and
    <LATEXINLINE>$\frac{1}{12}$</LATEXINLINE> is a unit fraction. Next, we can
    compare <LATEXINLINE>$\frac{1}{3}$</LATEXINLINE> and
    <LATEXINLINE>$\frac{2}{5}$</LATEXINLINE>, which have a difference of
    <LATEXINLINE>$\frac{1}{15}$</LATEXINLINE>. We can do this continuously until
    the right-most fraction of the tree. As we continue building the tree, we
    can see that it can grow infinitely, as the left grows closer to 0 and the
    right grows closer to infinity. Looking at the left side of
    <LATEXINLINE>$\frac{1}{1}$</LATEXINLINE>, we can find all the fractions from
    0 to 1. This is useful as we can use this to find Egyptian fractions using
    the differences between 0 to that fraction. We will explore this in the
    later section of the book. For now, we will look at how the Stern-Brocot
    sequence is defined. This is linked to the continued fraction method.
    <INDEX>Egyptian Fraction Algorithms
        <SUBINDEX>Continued Fraction</SUBINDEX></INDEX>


    In general, this sequence can be defined by the rule
    <LATEX>
      \begin{eqnarray*}
      \textrm{Stern}(n) &amp; = &amp; \left\{ \begin{array}{ll}
      1   &amp;  \mbox{if $n=1$ or $n=2$}\\
      \textrm{Stern}(\frac{n}{2})   &amp;  \mbox{if $n$ is even}\\
      \textrm{Stern}(\frac{n-1}{2})+\textrm{Stern}(\frac{n+1}{2}) &amp; \mbox{otherwise}
      \end{array}
      \right.
      \end{eqnarray*}
    </LATEX>
  </TEXT>

  <TEXT>
    We can immediately translate this definition into a recursive
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for computing the Stern-Brocot sequence using the divide functions from the
    earlier chapters:
    <!-- \indcode*{fib}[tree-recursive version] -->

    <SNIPPET>
      <NAME>stern_definition</NAME>
      <REQUIRES>modulo_definition</REQUIRES>
      <REQUIRES>divide_definition</REQUIRES>
      <REQUIRES>minus_definition</REQUIRES>
      <EXAMPLE>stern_example</EXAMPLE>
      <JAVASCRIPT>
function stern(n) {
    return n &lt;= 2
        ? 1
        : isNaN(modulo(n, 2))
            ? stern(divide(n, 2))
            ? stern(divide(minus(n, 1), 2)) +
                stern(divide(n + 1, 2));
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>stern_example</NAME>
      <REQUIRES>stern_definition</REQUIRES>
      <EXPECTED>4</EXPECTED>
      <JAVASCRIPT>
stern(15);
      </JAVASCRIPT>
    </SNIPPET>

    <FIGURE>
      <JAVASCRIPT>
        <FIGURE src="img_egypt/ch1-Z-G-13.svg"></FIGURE>
      </JAVASCRIPT>
      <LABEL NAME="fig:stern-tree"/>
      <CAPTION>The tree-recursive process generated in computing
      <JAVASCRIPT><JAVASCRIPTINLINE>stern(15)</JAVASCRIPTINLINE></JAVASCRIPT>
      </CAPTION>
    </FIGURE>
  </TEXT>

  <TEXT>
    Consider the pattern of the computation of a tree. To compute
    <JAVASCRIPTINLINE>stern(15)</JAVASCRIPTINLINE>
    we compute
    <JAVASCRIPTINLINE>stern(7)</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>stern(8)</JAVASCRIPTINLINE>
    To compute
    <JAVASCRIPTINLINE>stern(7)</JAVASCRIPTINLINE>
    we compute
    <JAVASCRIPTINLINE>stern(3)</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>stern(4)</JAVASCRIPTINLINE>.
    In general, the evolved process looks like a tree, as shown in
    figure<SPACE/><REF NAME="fig:stern-tree"/>. Notice that the
    branches split into one or two at each level (except at the bottom);
    this reflects the fact that the <JAVASCRIPTINLINE>stern</JAVASCRIPTINLINE>
    function calls itself twice when <JAVASCRIPTINLINE>n</JAVASCRIPTINLINE>
    is odd and once when it is even. However, as we look at the tree, we see
    it skips some steps when computing the the n-th value which reduces the
    number of steps required. However, if we were to find the whole
    Stern-Brocot sequence to get the tree, we would need all the terms from 1 to
    <LATEXINLINE>$n$</LATEXINLINE>, which would result in a lot redundant
    computation. This is what the code would like if we use an integer to show
    the sequence as we did in the previous subsection:

    <SNIPPET>
      <NAME>stern_rec_seq</NAME>
      <REQUIRES>stern_definition</REQUIRES>
      <REQUIRES>minus_definition</REQUIRES>
      <REQUIRES>combine_definition</REQUIRES>
      <EXAMPLE>stern_rec_seq_example</EXAMPLE>
      <JAVASCRIPT>
function stern_sequence(n) {
    return n === 1
       ? stern(1)
       : combine(stern_sequence(minus(n, 1)), stern(n));
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>stern_rec_seq_example</NAME>
      <REQUIRES>stern_definition</REQUIRES>
      <REQUIRES>stern_rec_seq</REQUIRES>
      <EXPECTED>112132314352534</EXPECTED>
      <JAVASCRIPT>
stern_sequence(15);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Notice in figure<SPACE/><REF NAME="fig:stern-tree"/> that the entire
    computation of
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>stern(4)</JAVASCRIPTINLINE> would be
      </JAVASCRIPT>
    repeated twice on top of the original computation for the 4th term and the
    making of the sequence grows linearly.

    The process uses a number of steps that grows logarithmically with the
    input because the input is halved at every step. However, when
    finding a whole sequence, this would grow bigger still, which we will
    explore in the next subsection. Also, the space required grows only linearly
    with the input, because we need keep track only of which nodes are above us
    in the tree at any point in the computation. In general, the number of steps
    required by a tree-recursive process will be proportional to the number of
    nodes in the tree, while the space required will be proportional to the
    maximum depth of the tree.
  </TEXT>

  <TEXT>
    We can also formulate an iterative process for computing the Stern-Brocot
    sequence. This would be a faster way to compute the whole sequence but
    slower in finding the individual terms. The idea is to find the sequence
    before finding the individual terms.

    To find the sequence iteratively, we first use a pair of integers
    <JAVASCRIPTINLINE>counter</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>last</JAVASCRIPTINLINE>, initialized to 2 and
    <LATEXINLINE>$n$</LATEXINLINE> (the last term of the sequence), and
    initialise another integer called <JAVASCRIPTINLINE>seq</JAVASCRIPTINLINE>
    to store the sequence of numbers. Since
    <LATEXINLINE>$\textrm{Stern}(1)= \textrm{Stern}(2) = 1$</LATEXINLINE>, we
    initialise <JAVASCRIPTINLINE>seq</JAVASCRIPTINLINE> to 11, to represent the
    first 2 digits in the sequence. (Since we only have numbers as data type so
    far, we choose to represent the sequence as a big integer, like we did for
    the recursive method when finding the sequence.) At each step, we
    repeatedly apply the simultaneous transformations
      <LATEX>
          \begin{eqnarray*}
          counter &amp; \leftarrow &amp; counter + 1 \\
          last &amp; \leftarrow &amp; last \\
          seq &amp; \leftarrow &amp; add\_to\_seq(seq, counter)
          \end{eqnarray*}
      </LATEX>
    When forming the sequence, it is not hard to show that, after applying this
    transformation <LATEXINLINE>$n - 2$</LATEXINLINE> times,
    <LATEXINLINE>$counter$</LATEXINLINE> and <LATEXINLINE>$last$</LATEXINLINE>
    will be equal and the last digit of the sequence is
    <LATEXINLINE>Stern(n)</LATEXINLINE>  Thus, we can compute the Stern-Brocot
    sequence iteratively using the function

    <SNIPPET>
      <NAME>stern_iter_seq</NAME>
      <REQUIRES>add_to_seq</REQUIRES>
      <EXAMPLE>stern_iter_seq_example</EXAMPLE>
      <JAVASCRIPT>
function stern_iter(seq, counter, last) {
    return last === 1
        ? 1
        : counter === last
            ? seq
            : stern_iter(add_to_seq(seq, counter), counter + 1, last);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>stern_iter_seq_example</NAME>
      <EXPECTED>112132314352534</EXPECTED>
      <JAVASCRIPT>
stern_iter(11, 2, 15);
      </JAVASCRIPT>
    </SNIPPET>

    Here, we find the sequence using
    <JAVASCRIPTINLINE>stern_iter</JAVASCRIPTINLINE>, following the
    transformations we have mentioned above. To unpack what is inside, let's
    take a look at how the sequence is formed.

    <FIGURE>
      <JAVASCRIPT>
        <FIGURE src="img_egypt/ch1-Z-G-14.svg"></FIGURE>
      </JAVASCRIPT>
      <LABEL NAME="fig:stern-sequence"/>
      <CAPTION>The full Stern-Brocot sequence up to
      <JAVASCRIPT><JAVASCRIPTINLINE>stern(15)</JAVASCRIPTINLINE></JAVASCRIPT>
      </CAPTION>
    </FIGURE>

    From this figure, we can visualise how the terms are considered and used to
    find the next term to be added. To decide what the n-th term is:
    <UL>
      <LI>
        We need to check whether <LATEXINLINE>$n$</LATEXINLINE> is even or odd
      </LI>
      <LI>
        We find out which term we need in the current sequence
      </LI>
      <LI>
        We extract the term out to get <LATEXINLINE>$Stern(n)$</LATEXINLINE>
      </LI>
      <LI>
        We add the term into the sequence
      </LI>
    </UL>
    With this breakdown, we can break down the problem into manageable modules:

    <SNIPPET>
      <NAME>add_to_seq</NAME>
      <REQUIRES>find_number</REQUIRES>
      <REQUIRES>combine_definition</REQUIRES>
      <EXAMPLE>add_to_seq_example</EXAMPLE>
      <JAVASCRIPT>
function add_to_seq(seq, length) {
    const next_term = length + 1;
    if (divide_remainder(next_term, 2) === 1) { //odd
        const first_position = divide(minus(next_term - 1), 2);
        const second_position = divide(next_term + 1, 2);
        const first_number = find_number(seq, first_position, length + 1);
        const second_number = find_number(seq, second_position, length + 1);
        const nth_term = first_number + second_number;
        return combine(seq, nth_term);
    } else { //even
        const position = divide(next_term, 2);
        const nth_term = find_number(seq, position, length + 1);
        return combine(seq, nth_term);
    }
}      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>add_to_seq_example</NAME>
      <EXPECTED>112</EXPECTED>
      <JAVASCRIPT>
add_to_seq(11, 2);
      </JAVASCRIPT>
    </SNIPPET>

    With this breakdown, we can easily write what we need. We can find the
    positions using the formula of the Stern-Brocot sequence given above. With
    that, we can find the numbers we need to find the next term. Once we have
    the next term, we can add it by shifting the sequence to the left by
    multiplying by 10 and adding the new term to it, as seen in the return line.
    Lastly, we consider how to find the number in the sequence that we need
    after we have found the position of the number as defined by
    <JAVASCRIPTINLINE>find_number(seq, position, length)</JAVASCRIPTINLINE>:

    <SNIPPET>
      <NAME>find_number</NAME>
      <REQUIRES>modulo_definition</REQUIRES>
      <REQUIRES>divide_definition</REQUIRES>
      <REQUIRES>exp_ten_definition</REQUIRES>
      <EXAMPLE>find_number_example</EXAMPLE>
      <JAVASCRIPT>
function find_number(seq, position, length) {
    return position === length
        ? length === 1
          ? seq
          : divide(seq, exp_ten(minus(length,1)))
        : find_number(modulo (seq, exp_ten(minus(length, 1))),
            position, minus(length, 1));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>find_number_example</NAME>
      <EXPECTED>1</EXPECTED>
      <JAVASCRIPT>
//finding the number at the first position in the sequence (11)
find_number(11, 1, 2);
      </JAVASCRIPT>
    </SNIPPET>

    In the above code, all the parameters are integers.
    <JAVASCRIPTINLINE>seq</JAVASCRIPTINLINE> represents an integer with
    <JAVASCRIPTINLINE>length</JAVASCRIPTINLINE> digits and
    <JAVASCRIPTINLINE>position</JAVASCRIPTINLINE> shows which digit (from the
    left) in the integer you want to extract. Here, we again use
    <JAVASCRIPTINLINE>exp_ten(x)</JAVASCRIPTINLINE> to find
    <LATEXINLINE>$10^{x}$</LATEXINLINE> to divide with. (To understand this
    better, try using numbers as example and finding digits from it.)

    Now, that we have found the sequence, we can find the last term by finding
    the last digit in the sequence:

    <SNIPPET>
      <NAME>stern_iter</NAME>
      <REQUIRES>stern_iter_seq</REQUIRES>
      <EXAMPLE>stern_iter_example</EXAMPLE>
      <JAVASCRIPT>
function stern (n) {
    return find_number( stern_iter(11, 2, n),
          1, n);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>stern_iter_example</NAME>
      <EXPECTED>4</EXPECTED>
      <JAVASCRIPT>
stern(15);
      </JAVASCRIPT>
    </SNIPPET>

    This second method for computing the whole sequence is a linear iteration
    without any redundancy as it uses terms that have already been computed. In
    both, going through the sequence from 1 to n takes linear time.
    The difference in number of steps by the 2 methods to form the whole
    sequence is that the recursive one takes logarithmic time to calculate each
    term since the iterative one only uses a fixed number of steps. On the other
    hand, to get just the n-th term, the recursive function grows
    logarithmically while the iterative function needs to build the whole
    sequence which takes linear time.

    With these trade-offs in different scenarios, we can see how tree-recursive
    processes are useful and at the same time can create redundancy, especially
    when there are repeated computations. In cases where processes that operate
    on hierarchically structured data rather than numbers, we find that tree
    recursion is a natural and powerful tool. <FOOTNOTE>An example of this was
    hinted at in section<SPACE/><REF NAME="sec:evaluating-combinations"/>: The
    interpreter itself evaluates expressions using a tree-recursive process.
    </FOOTNOTE>

    As we build both the recursive and iterative processes for the Stern-Brocot
    sequence, we see that the tree recursive method is naturally more
    straightforward to build the iterative one. To formulate the iterative
    algorithm required noticing that the computation could be recast as an
    iteration with three state variables.
  </TEXT>

  <SUBHEADING>
    <NAME>Example: Splitting Method for Egyptian Fractions</NAME>
  </SUBHEADING>
  <INDEX>Egyptian Fraction Algorithms<SUBINDEX>Splitting</SUBINDEX></INDEX>

  <TEXT>
    Consider an Egyptian Fraction algorithm called the Splitting Method.
    This method finds an Egyptian Fraction decomposition based on this
    equation:
    <LATEX>
      \[ \frac{1}{x} = \frac{1}{x+1} + \frac{1}{x(x+1)}\]
    </LATEX>
    As mentioned earlier in Chapter 0, an Egyptian Fraction decomposition
    represents a fraction in terms of distinct unit fractions (ie. fractions
    with 1 as their numerator).

    With this equation, we can compute the decomposition of any fraction
    <LATEXINLINE>$\frac{a}{b}$</LATEXINLINE> into <LATEXINLINE>a</LATEXINLINE>
    pieces of <LATEXINLINE>$\frac{1}{b}$</LATEXINLINE>. Since the decomposition
    has to be unique, each <LATEXINLINE>$\frac{1}{b}$</LATEXINLINE> have to be
    decomposed in different ways. With the equation above, we can repeatedly
    find decompositions until we have <LATEXINLINE>a</LATEXINLINE> variations of
    <LATEXINLINE>$\frac{1}{b}$</LATEXINLINE>. For example, looking at the
    fraction <LATEXINLINE>$\frac{3}{5}$</LATEXINLINE>:

    <FIGURE>
      <FIGURE src="img_egypt/ch1-Z-G-15.svg">
        <LABEL NAME="splitting-tree"/>
        <CAPTION>Tree formed from splitting algorithm to find Egyptian
        Fraction decomposition</CAPTION>
      </FIGURE>
    </FIGURE>
  </TEXT>
  <TEXT>
    As seen from the figure, it shows how the tree structure helps to find the
    Egyptian Fraction decomposition of <LATEXINLINE>$\frac{3}{5}$</LATEXINLINE>.
    At each level, the fraction is split into 2 fractions based on the equation
    above. As we look at the trees, we can observe that the leaves of the trees
    (the last row of each <LATEXINLINE>$\frac{1}{5}$</LATEXINLINE> tree) are all
    in the decomposition as each <LATEXINLINE>$\frac{1}{5}$</LATEXINLINE> is
    represented with different unit fractions.
  </TEXT>

  <TEXT>
    We could compute each tree individually and include all of the leaves at the
    end. We can do this by iterating over each tree. However, we are currently
    limited because our functions only return one number and can only represent
    the sequence of denominators of the unit fractions as a big integer.
  </TEXT>

  <TEXT>
    Now that we have decided to represent the denominators as a big integer (by
    using the fact that we can change places of the digits by multiplying with
    powers of 10), we can immediately translate this into an iterative function
    with some helper functions:
  </TEXT>

    <SNIPPET HIDE="yes">
      <NAME>splitting_helper_definition</NAME>
      <REQUIRES>combine_definition</REQUIRES>
      <EXAMPLE>splitting_helper_example</EXAMPLE>
      <JAVASCRIPT>
function split_first(x) {
    return x + 1;
}
function split_second(x) {
    return x * (x + 1);
}
function combine_split(first, second) {
    return combine(first, second);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>splitting_helper_example</NAME>
      <EXPECTED>630</EXPECTED>
      <JAVASCRIPT>
//splitting 2/5 into 1/6 and 1/30 and displaying as a number: 630
combine_split(split_first(5), split_second(5));
      </JAVASCRIPT>
    </SNIPPET>


  <SNIPPET>
    <NAME>splitting_slow_definition</NAME>
    <REQUIRES>splitting_helper_definition</REQUIRES>
    <EXAMPLE>splitting_slow_example</EXAMPLE>
    <JAVASCRIPT>
function split_ef(a, b) {
    function iter(a, b, level) {
        return a === level
            ? b
            : combine_split( iter(a, split_first(b), level + 1),
                iter(a, split_second(b), level + 1) );
    }
    function go_thru_tree(a, b, tree_ht) {
        return (tree_ht === a)
            ? iter(tree_ht, b, 1)
            : combine_split( iter(tree_ht, b, 1),
            go_thru_tree(a, b, tree_ht + 1) );
    }
    return go_thru_tree(a, b, 1);
}
    </JAVASCRIPT>
  </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>splitting_slow_example</NAME>
      <EXPECTED>563074231930</EXPECTED>
      <JAVASCRIPT>
split_ef(3,5);
      </JAVASCRIPT>
    </SNIPPET>

  <TEXT>
    For each tree, we use the function <JAVASCRIPTINLINE>iter</JAVASCRIPTINLINE>
    to get the leaves (bottom level of tree). Initially, we will start at level
    1, represented by <JAVASCRIPTINLINE>level</JAVASCRIPTINLINE>. At every step,
     we check if the current level is the bottom level. If it is, the
    denominator is a leaf and we return it. Otherwise, we will go to the next
    level of the tree by incrementing <JAVASCRIPTINLINE>level</JAVASCRIPTINLINE>
     and change the denominator using the helper functions which are based on
    the equation earlier on. With each leaf found, we use another helper
    function to combine the leaves together.

    Now that we have found how to get each tree, we need to go through every
    tree that is formed. As we can see from figure
    <SPACE/><REF NAME="splitting-tree"/>, the number of trees is equal to the
    numerator of the fraction. We use increasing tree heights as according to
    the figure to iterate through the trees. Once the tree's height is the same
    as <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE>, it indicates that it is the last
    tree. Otherwise, we add the leaves found behind the current tree that has
    number of levels according to <JAVASCRIPTINLINE>tree_ht</JAVASCRIPTINLINE>.
    We can observe that the trees in figure <SPACE/><REF NAME="splitting-tree"/>
    helps us to visualise the code to get the results that we want.
  </TEXT>

    <SNIPPET>
    <NAME>splitting_helper</NAME>
    <JAVASCRIPT>
function split_first(x) {
    return x + 1;
}
function split_second(x) {
    return x * (x + 1);
}
function combine_split(first, second) {
    return combine(first, second);
}
    </JAVASCRIPT>
  </SNIPPET>

  <TEXT>
    In our method, we use helper functions that helps us to visualise how the
    Egyptian Fractions can be found. For the 2 helper functions
    <JAVASCRIPTINLINE>split_first</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>split_second</JAVASCRIPTINLINE>, they find the first
    and second denominators that can be used to represent the original unit
    fraction. <JAVASCRIPTINLINE>combine_split</JAVASCRIPTINLINE> is used to
    combine the denominators together like in the previous subsection. Once we
    hit the last level of the tree (represented by counter = a), we want to
    include the denominator into the sequence. Looking at the individual trees,
    we also want to add all the leaves together and can use
    <JAVASCRIPTINLINE>combine_split</JAVASCRIPTINLINE> to combine the leaves in
    the same way.
  </TEXT>

  <TEXT>
    When getting the output, we see that it gives a big number with all the
    denominators shown side by side. However, this is not ideal as it is hard to
    tell the denominators apart and there is a maximum number of digits that we
    can use due to the limitation of integers in JavaScript. We will introduce
    an alternative method to represent this sequence of numbers.
  </TEXT>

  <TEXT>
    However, this current method results in some redundant computation because
    we see that each new tree would have to recreate the same levels of the
    previous tree. For example, we have already found in the second tree
    <LATEXINLINE>$\frac{1}{6}$</LATEXINLINE> and
    <LATEXINLINE>$\frac{1}{30}$</LATEXINLINE> but we have to look at them a
    second time in the third tree. If the numerator was bigger, there would be
     more redundancy in the computation.

    Taking another look at the last tree on the right, we observe that all the
    values on it are part of the decomposition since each row is a different
    way of representing <LATEXINLINE>$\frac{1}{5}$</LATEXINLINE> and the number
    of rows is equal to the number of <LATEXINLINE>$\frac{1}{5}$</LATEXINLINE>
    in <LATEXINLINE>$\frac{3}{5}$</LATEXINLINE>, ie. 3. If we go through the
    entire tree, we can find all the unit fractions in the decomposition.
  </TEXT>

  <SNIPPET>
    <NAME>splitting_definition</NAME>
    <REQUIRES>splitting_helper_definition</REQUIRES>
    <EXAMPLE>splitting_example</EXAMPLE>
    <JAVASCRIPT>
function split_ef(a, b) {
    return a === 1
        ? b
        : combine_split(b,
            combine_split(split_ef(minus(a, 1), split_first(b)),
                split_ef(minus(a, 1), split_second(b)) )
          );
}
    </JAVASCRIPT>
  </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>splitting_example</NAME>
      <EXPECTED>567423031930</EXPECTED>
      <JAVASCRIPT>
split_ef(3,5);
      </JAVASCRIPT>
    </SNIPPET>


  <FIGURE>
      <JAVASCRIPT>
        <FIGURE src="img_egypt/ch1-Z-G-16.svg"></FIGURE>
      </JAVASCRIPT>
    <LABEL NAME="fig:splitting-tree-order"/>
    <CAPTION>The tree-recursive process generated in computing the Egyptian
      Fraction decomposition of <LATEXINLINE>$\frac{3}{5}$</LATEXINLINE> with
      the Splitting method
    </CAPTION>
  </FIGURE>

  <TEXT>
    Consider the pattern of the computation of a tree. To compute
    <JAVASCRIPTINLINE>split_ef(3, 5)</JAVASCRIPTINLINE>
    we compute
    <JAVASCRIPTINLINE>split_ef(2, 6)</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>split_ef(2, 30)</JAVASCRIPTINLINE>.
    To compute
    <JAVASCRIPTINLINE>split_ef(2, 6)</JAVASCRIPTINLINE>
    we compute
    <JAVASCRIPTINLINE>split_ef(1, 7)</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>split_ef(1, 42)</JAVASCRIPTINLINE>.
    The evolved process looks like a tree, as shown in figure
    <SPACE/><REF NAME="fig:splitting-tree-order"/>. Notice that the
    branches split into two at each level (except at the bottom); this reflects
    the fact that the <JAVASCRIPTINLINE>split_ef</JAVASCRIPTINLINE> function
    calls itself twice each time it is invoked.
  </TEXT>
  <TEXT>
    As we see each value splitting into 2, we can show that the value of
    <JAVASCRIPTINLINE>split_ef(a, b)</JAVASCRIPTINLINE> grows exponentially
    with <LATEXINLINE>$a$</LATEXINLINE>. The number of
    denominators in the answer is given by <LATEXINLINE>$2^a$</LATEXINLINE>
    since it mutiplies by 2 at each level and there are
    <LATEXINLINE>$a$</LATEXINLINE> levels.

    In both methods, tree recursion is used to visualise the algorithm. However,
    we can see that the first method goes through more steps in an iterative
    manner by looking at the levels one by one before finding the leaves.
    In the second one however, we go through a branch first until we reach the
    leaf before going through the rest of the tree and including the
    denominators found along the path. This results in different results as the
    order of the denominators found has changed.
  </TEXT>

  <TEXT>
    When solving problems with tree recursion and redundancies, there is
    usually an iterative process that grows linearly instead, as we saw in the
    Stern-Brocot sequence example. However, it is not always obvious how to
    design a better algorithm for computing the result. The observation that a
    <INDEX>efficiency<SUBINDEX>tree@of tree-recursive process</SUBINDEX></INDEX>
    tree-recursive process may be highly inefficient but often easy to specify
    and understand has led people to propose that one could get the best of both
    worlds by designing a <QUOTE>smart compiler</QUOTE> that could transform
    tree-recursive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    into more efficient
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that compute the same result.<FOOTNOTE>One approach to coping with redundant
    computations is to arrange matters so that we automatically construct a
    table of values as they are computed.  Each time we are asked to apply the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to some argument, we first look to see if the value is already stored in the
    table, in which case we avoid performing the redundant computation. This
    strategy, known as
    <INDEX>tabulation</INDEX><INDEX>memoization</INDEX>
    <EM>tabulation</EM> or <EM>memoization</EM>, can be implemented in a
    straightforward way. Tabulation can sometimes be used to transform processes
    that require an exponential number of steps into processes whose space and
    time requirements grow linearly with the input, similar to the iterative
    process for the Stern-Brocot sequence.
    </FOOTNOTE>
  </TEXT>

  <EXERCISE>
    Another alternative for finding the Egyptian Fraction decomposition of a
    fraction is the pairing method where it does not grow the denominators in
    an exponential manner. This is based on the equation we mentioned earlier
    but written differently:
    <LATEX>
      \[ \frac{1}{b}+ \frac{1}{b} = \frac{2}{b+1} + \frac{2}{b(b+1)}\]
    </LATEX>
    <LATEX>
      \[
      \frac{a}{b} = \left\{ \begin{array}{rl}
      \frac{1}{b} + \frac{a-1}{b}  &amp; \mbox{if $a$ is odd} \\
      \frac{\frac{a}{2}}{\frac{b}{2}}  &amp; \mbox{if $a$ and $b$ are even} \\
      \frac{\frac{a}{2}}{\frac{b+1}{2}} + \frac{\frac{a}{2}}{\frac{b(b+1)}{2}} &amp; \mbox{otherwise}
      \end{array}
      \right.
      \]
    </LATEX>

    To understand what the function is doing, draw out the recursion trees for
    <LATEXINLINE>$\frac{3}{5}$</LATEXINLINE> and
    <LATEXINLINE>$\frac{7}{15}$</LATEXINLINE>.

    (Note: if you try to code the function, you will find that duplicates formed
    from the equations are not taken care of, which we will address later in the
    book. To understand what this means, try drawing the tree of
    <LATEXINLINE>$\frac{5}{6}$</LATEXINLINE>. Hence, we will not code it here.)
  <SOLUTION>
  <FIGURE>
      <JAVASCRIPT>
        <FIGURE src="img_egypt/ch1-Z-G-17.svg"></FIGURE>
      </JAVASCRIPT>
    <LABEL NAME="fig:pairing-3-5"/>
    <CAPTION>The tree-recursive process generated in computing the Egyptian
      Fraction decomposition of <LATEXINLINE>$\frac{3}{5}$</LATEXINLINE> with
      the Pairing method
    </CAPTION>
  </FIGURE>
  <FIGURE>
      <JAVASCRIPT>
        <FIGURE src="img_egypt/ch1-Z-G-18.svg"></FIGURE>
      </JAVASCRIPT>
    <LABEL NAME="fig:pairing-7-15"/>
    <CAPTION>The tree-recursive process generated in computing the Egyptian
      Fraction decomposition of <LATEXINLINE>$\frac{7}{15}$</LATEXINLINE> with
      the Splitting method
    </CAPTION>
  </FIGURE>
    </SOLUTION>
  </EXERCISE>

</SUBSECTION>
